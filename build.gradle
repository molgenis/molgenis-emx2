/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id "java"
    id "org.sonarqube" version "3.5.0.2730"
    id "de.gliderpilot.semantic-release" version "1.4.2"
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
    id 'org.unbroken-dome.helm' version '1.7.0'
    id 'org.unbroken-dome.helm-publish' version '1.7.0'
    id 'org.unbroken-dome.helm-commands' version '1.7.0'
    id 'com.palantir.docker' version '0.35.0'
}


targetCompatibility = '17'
sourceCompatibility = '17'

sonarqube {
    properties {
        property 'sonar.projectName', 'molgenis-emx2'
        property 'sonar.projectKey', 'molgenis_molgenis-emx2'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${projectDir}/backend/build/reports/jacoco/jacocoMergedReport/jacocoMergedReport.xml"
    }
}

allprojects {
    group = 'org.molgenis'
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors();
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
    maven {
        url = "https://registry.molgenis.org/repository/maven-public"
    }
}

dependencies {
    implementation project(':backend:molgenis-emx2-run')
    docker project(":apps:nuxt3-ssr")
}

mainClassName = 'org.molgenis.emx2.RunMolgenisEmx2'
shadowJar {
    archiveBaseName = 'molgenis-emx2'
    mergeServiceFiles()
}

publishing {
    repositories {
        maven {
            // change to point to repo later
            url = "$buildDir/repo"
        }
    }
}

project.ext.ghToken = project.hasProperty('ghToken') ? project.getProperty('ghToken') : System.getenv('GITHUB_TOKEN') ?: null
semanticRelease {
    repo {
        releaseAsset shadowJar
        ghToken = project.ghToken
    }
}

def imageName = 'docker.io/molgenis/molgenis-emx2'
def tagName = project.version.toString()
if (version.toString().endsWith('-SNAPSHOT')) {
    ext.hash = 'git rev-parse --short HEAD'.execute().text.trim()
    imageName = "docker.io/molgenis/molgenis-emx2-snapshot"
    tagName = "${project.version.toString()}-${ext.hash}"
}
// write a file to pickup in deployment to use specific tags in upgrade
task ci(type: WriteProperties) {
    outputFile file('build/ci.properties')
    property 'tagName', tagName
}

docker {
    name imageName
    tags tagName, 'latest'
    files shadowJar.archiveFile.get()
    buildArgs(['JAR_FILE': shadowJar.archiveName])
}
tasks.dockerPrepare.dependsOn(shadowJar)

//ssr build moved to apps/build.gradle

def nexusUser = System.getenv('NEXUS_USER') ? System.getenv('NEXUS_USER') : null
def nexusPassword = System.getenv('NEXUS_PWD') ? System.getenv('NEXUS_PWD') : null
helm {
    downloadClient {
        enabled = true
    }

    publishing {
        repositories {
            nexus {
                url = uri('https://registry.molgenis.org/')
                repository = 'helm'
                apiVersion = 'v1'
                credentials {
                    username = "${nexusUser}"
                    password = "${nexusPassword}"
                }
            }
        }
    }

    charts {
        main {
            sourceDir = file('helm-chart')
            lint {
                strict = false
            }
        }
    }
}

String getGitHash() {
    // git hash
    def command = Runtime.getRuntime().exec("git rev-parse --short HEAD")
    def result = command.waitFor()
    if (result != 0) {
        throw new IOException("Command 'getGitHash()' exited with " + result)
    }

    String gitCommitHash = command.inputStream.text.trim()

    return gitCommitHash
}

ext {
    javaMainClass = "org.molgenis.emx2.RunMolgenisEmx2"
}

application {
    mainClass.set(javaMainClass)
}

jar {
    reproducibleFileOrder = true
    manifest {
        attributes(
                'Specification-Version': project.version.toString(),
                'Implementation-Version': getGitHash(),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

task cleandb(type: JavaExec) {
    group = "Execution"
    description = "Clean database. Carefull, will delete all MOLGENIS stuff"
    classpath = sourceSets.main.runtimeClasspath
    main = "org.molgenis.emx2.AToolToCleanDatabase"
}
