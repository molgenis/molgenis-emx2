import "ontology.jslt" as ontology
import "meta.jslt" as meta
import "response_summary.jslt" as responseSummary
import "info.jslt" as info
{
    "meta": meta(.),
    "responseSummary": responseSummary(.),
    "response": {
        "resultSets":
        [for (.resultSets)
            {
                "id": .id,
                "type": "dataset",
                "setType": "genomicVariant",
                "exists": true,
                "resultsCount": .count,
                "results":
                [for (.results) {
                    "variantInternalId": .variantInternalId,
                    "variation": {
                        "variantType": .variantType,
                        "referenceBases": uppercase(.referenceBases),
                        "alternateBases": uppercase(.alternateBases),
                        "location": {
                            "sequence_id": .position_refseqId,
                            "type": "SequenceLocation",
                            "interval": {
                                "type": "SequenceInterval",
                                "start": {
                                    "type": "Number",
                                    "value": number(.position_start)
                                },
                                "end": {
                                    "type": "Number",
                                    "value": number(.position_end)
                                }
                            }
                        }
                    },
                    "identifiers": {
                        "clinVarIds": [ ],
                        "genomicHGVSId": .genomicHGVSId,
                        "proteinHGVSIds": .proteinHGVSIds,
                        "transcriptHGVSIds": .transcriptHGVSIds,
                        "variantAlternativeIds": [ ]
                    },
                    "molecularAttributes": {
                        "geneIds": if (.geneId) [.geneId ],
                        "aminoacidChanges": [ ]
                    },
                    "variantLevelData": if (.clinicalInterpretations) {
                        "clinicalInterpretations":
                        [for (.clinicalInterpretations) {
                                "category": ontology(.category),
                                "clinicalRelevance": lowercase(.clinicalRelevance.name),
                                "conditionId": .conditionId,
                                "effect": ontology(.effect)
                            }]
                    }
                }]
            }]
    },
    "info": info(.info)
}
