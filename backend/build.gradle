plugins {
    id "jacoco"
    id "java"
    id "com.diffplug.spotless" version "6.25.0" apply false
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: "com.diffplug.spotless"

    repositories {
        mavenLocal()
        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }
    }

    spotless {
        java {
            googleJavaFormat('1.22.0')
        }
    }
    compileJava.dependsOn 'spotlessApply'

    task format {
        dependsOn spotlessApply
    }

    /* default dependencies for all projects*/
    dependencies {
        implementation group: 'org.apache.logging.log4j', name:'log4j-core', version:log4jVersion
        implementation group: 'org.apache.logging.log4j', name:'log4j-slf4j2-impl', version:log4jVersion
        implementation group: 'org.jooq', name:'jooq', version:jooqVersion
        implementation group: 'com.zaxxer', name:'HikariCP', version:hikariCPVersion
        implementation group: 'com.fasterxml.jackson.dataformat', name:'jackson-dataformat-yaml', version:jacksonVersion
        implementation group: 'com.fasterxml.jackson.dataformat', name:'jackson-dataformat-csv', version:jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name:'jackson-databind', version:jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name:'jackson-core', version:jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name:'jackson-annotations', version:jacksonVersion
        implementation group: 'com.graphql-java', name:'graphql-java', version:graphqlVersion
        implementation group: 'com.graphql-java', name:'graphql-java-extended-scalars', version:graphqlScalarsVersion
        implementation group: 'com.sparkjava', name:'spark-core', version:sparkJavaVersion
        implementation group: 'org.pac4j', name:'pac4j-core', version:pac4jVersion
        implementation group: 'org.pac4j', name:'pac4j-oidc', version:pac4jVersion
        implementation group: 'org.pac4j', name:'pac4j-http', version:pac4jVersion
        implementation group: 'org.pac4j', name:'spark-pac4j', version:sparkPac4jVersion
        implementation group: 'org.javers', name:'javers-core', version:javersVersion
        implementation group: 'com.nimbusds', name:'nimbus-jose-jwt', version:nimbusdsVersion
        implementation group: 'com.schibsted.spt.data', name:'jslt', version:schibstedVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-rio-api', version:rdf4jVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-rio-jsonld', version:rdf4jVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-rio-turtle', version:rdf4jVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-rio-n3', version:rdf4jVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-rio-trig', version:rdf4jVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-rio-rdfxml', version:rdf4jVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-rio-ntriples', version:rdf4jVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-rio-nquads', version:rdf4jVersion
        implementation group: 'org.eclipse.rdf4j', name:'rdf4j-shacl', version:rdf4jVersion

        //also used outside test
        implementation group: 'org.junit.jupiter', name:'junit-jupiter', version:junitVersion
        testRuntimeOnly group: 'org.junit.jupiter', name:'junit-jupiter-engine', version:junitVersion
        testImplementation group: 'org.mockito', name:'mockito-core', version:mockitoVersion
        //allows to set environment variables in test
        testImplementation group: 'com.github.stefanbirkner', name:'system-lambda', version:systemLambdaVersion
    }

    jacoco {
        toolVersion = "0.8.12"
    }
    jacocoTestReport {
        reports {
            xml.required = true
            csv.required = false
            html.required = false
        }
    }

    targetCompatibility = rootProject.ext.javaVersion
    sourceCompatibility = rootProject.ext.javaVersion

    jar {
        reproducibleFileOrder = true
        manifest {
            attributes(
                    'Specification-Version': project.version.toString(),
                    'Implementation-Version': getGitHash(),
                    'Created-By': "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                    'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
            )
        }
    }

    test {
        jvmArgs("--add-opens=java.base/java.util=ALL-UNNAMED", "--add-opens=java.base/java.lang=ALL-UNNAMED")
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed" //, "standardOut", "standardError"

            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            showStandardStreams = false
        }
    }
    test.dependsOn ":backend:initDatabase"

    tasks.register('testFast', Test) {
        jvmArgs("--add-opens=java.base/java.util=ALL-UNNAMED")
        useJUnitPlatform {
            excludeTags "slow"
        }
        failFast true
        testLogging {
            events "passed", "skipped", "failed" //, "standardOut", "standardError"

            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            showStandardStreams = false
        }
    }
    tasks.register('testWindows', Test) {
        jvmArgs("--add-opens=java.base/java.util=ALL-UNNAMED")
        useJUnitPlatform {
            excludeTags "windowsFail"
        }
        failFast true
        testLogging {
            events "passed", "skipped", "failed" //, "standardOut", "standardError"

            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            showStandardStreams = false
        }
    }
}

/* have the non-parallel test package run last*/
project(":backend:molgenis-emx2-nonparallel-tests").test.dependsOn subprojects.findAll { it != project(":backend:molgenis-emx2-nonparallel-tests") }.collect { ":backend:${it.name}:test" }

/* task to init database */
task initDatabase(type: JavaExec, dependsOn: ':backend:molgenis-emx2-sql:compileJava') {
    main = 'org.molgenis.emx2.sql.InitDatabase'
    classpath = project("molgenis-emx2-sql").sourceSets.test.runtimeClasspath
    def outputFile = file("$buildDir/initDatabase.txt")
    doLast {
        //for caching purposes
        outputFile.text = "This is the output of the runMainClass task."
    }
    outputs.file(outputFile)
    outputs.upToDateWhen { outputFile.exists() }
}

/* generate java test coverage report*/
test.dependsOn subprojects.test
task jacocoMergedReport(type: JacocoReport) {
    dependsOn test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }
}
