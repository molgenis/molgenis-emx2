export { useScriptTriggerConsent, useScriptEventPage, useScriptTriggerElement, useScript, useScriptGoogleAnalytics, useScriptPlausibleAnalytics, useScriptClarity, useScriptCloudflareWebAnalytics, useScriptFathomAnalytics, useScriptMatomoAnalytics, useScriptGoogleTagManager, useScriptGoogleAdsense, useScriptSegment, useScriptMetaPixel, useScriptXPixel, useScriptIntercom, useScriptHotjar, useScriptStripe, useScriptLemonSqueezy, useScriptVimeoPlayer, useScriptYouTubePlayer, useScriptGoogleMaps, useScriptNpm, useScriptCrisp } from '#app/composables/script-stubs';
export { isVue2, isVue3 } from 'vue-demi';
export { defineNuxtLink } from '#app/components/nuxt-link';
export { useNuxtApp, tryUseNuxtApp, defineNuxtPlugin, definePayloadPlugin, useRuntimeConfig, defineAppConfig } from '#app/nuxt';
export { requestIdleCallback, cancelIdleCallback } from '#app/compat/idle-callback';
export { setInterval } from '#app/compat/interval';
export { useAppConfig, updateAppConfig } from '#app/config';
export { defineNuxtComponent } from '#app/composables/component';
export { useAsyncData, useLazyAsyncData, useNuxtData, refreshNuxtData, clearNuxtData } from '#app/composables/asyncData';
export { useHydration } from '#app/composables/hydrate';
export { callOnce } from '#app/composables/once';
export { useState, clearNuxtState } from '#app/composables/state';
export { clearError, createError, isNuxtError, showError, useError } from '#app/composables/error';
export { useFetch, useLazyFetch } from '#app/composables/fetch';
export { useCookie, refreshCookie } from '#app/composables/cookie';
export { onPrehydrate, prerenderRoutes, useRequestHeader, useRequestHeaders, useResponseHeader, useRequestEvent, useRequestFetch, setResponseStatus } from '#app/composables/ssr';
export { onNuxtReady } from '#app/composables/ready';
export { preloadComponents, prefetchComponents, preloadRouteComponents } from '#app/composables/preload';
export { abortNavigation, addRouteMiddleware, defineNuxtRouteMiddleware, setPageLayout, navigateTo, useRoute, useRouter } from '#app/composables/router';
export { isPrerendered, loadPayload, preloadPayload, definePayloadReducer, definePayloadReviver } from '#app/composables/payload';
export { useLoadingIndicator } from '#app/composables/loading-indicator';
export { getAppManifest, getRouteRules } from '#app/composables/manifest';
export { reloadNuxtApp } from '#app/composables/chunk';
export { useRequestURL } from '#app/composables/url';
export { usePreviewMode } from '#app/composables/preview';
export { useRouteAnnouncer } from '#app/composables/route-announcer';
export { useRuntimeHook } from '#app/composables/runtime-hook';
export { onBeforeRouteLeave, onBeforeRouteUpdate, useLink } from 'vue-router';
export { withCtx, withDirectives, withKeys, withMemo, withModifiers, withScopeId, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, computed, customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, watch, watchEffect, watchPostEffect, watchSyncEffect, isShallow, effect, effectScope, getCurrentScope, onScopeDispose, defineComponent, defineAsyncComponent, resolveComponent, getCurrentInstance, h, inject, hasInjectionContext, nextTick, provide, mergeModels, toValue, useModel, useAttrs, useCssModule, useCssVars, useSlots, useTransitionState, useId, useTemplateRef, useShadowRoot, Component, ComponentPublicInstance, ComputedRef, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode } from 'vue';
export { injectHead, useHead, useSeoMeta, useHeadSafe, useServerHead, useServerSeoMeta, useServerHeadSafe } from '@unhead/vue';
export { default as assetLoader } from '../composables/assetLoader';
export { fetchGql } from '../composables/fetchGql';
export { default as fetchMetadata } from '../composables/fetchMetadata';
export { fetchOntology } from '../composables/fetchOntology';
export { fetchSetting } from '../composables/fetchSetting';
export { sendContactForm } from '../composables/sendContactForm';
export { useBannerData } from '../composables/useBannerData';
export { useGqlFetch } from '../composables/useGqlFetch';
export { useHeaderData } from '../composables/useHeaderData';
export { useQueryParams } from '../composables/useQueryParams';
export { buildQueryFilter } from '../utils/buildQueryFilter';
export { default as dateUtils } from '../utils/dateUtils';
export { getCircularReplacer } from '../utils/debugUtils';
export { logError } from '../utils/errorLogger';
export { isConditionFilter, toPathQueryConditions, conditionsFromPathQuery, mergeWithPageDefaults } from '../utils/filterUtils';
export { calcAggregatedHarmonisationStatus, calcIndividualVariableHarmonisationStatus } from '../utils/harmonisation';
export { toHeadings, toSectionsMap } from '../utils/headingUtils';
export { buildTree, flattenTree, sortTree } from '../utils/ontologyUtils';
export { removeChildIfParentSelected } from '../utils/treeHelpers';
export { transformToKeyObject, buildValueKey, resourceIdPath } from '../utils/urlHelpers';
export { getKey } from '../utils/variableUtils';
export { default as fetchTableData, getColumnIds, ITableDataResponse } from '../../tailwind-components/composables/fetchTableData';
export { default as fetchTableMetadata } from '../../tailwind-components/composables/fetchTableMetadata';
export { flattenObject } from '../../tailwind-components/utils/flattenObject';
export { default as logger } from '../../tailwind-components/utils/logger';
export { moduleToString } from '../../tailwind-components/utils/moduleToString';
export { scrollToElementInside } from '../../tailwind-components/utils/scrollTools';
export { useImage } from '../../node_modules/@nuxt/image/dist/runtime/composables';
export { useGtag } from '../../node_modules/nuxt-gtag/dist/runtime/composables/useGtag';
export { useTrackEvent } from '../../node_modules/nuxt-gtag/dist/runtime/composables/useTrackEvent';
export { definePageMeta } from '../../node_modules/nuxt/dist/pages/runtime/composables';