{
  "/Banner.story.vue": "<template>\n  <div class=\"flex\">\n    <div class=\"flex-1\">\n      <Banner>\n        <span class=\"font-semibold\">Add a banner</span>\n        tell people stuff\n        <a class=\"underline\" href=\"mailto:#\"> add links </a>\n        (<a class=\"underline\" href=\"#\">and more links</a>)\n      </Banner>\n    </div>\n  </div>\n</template>\n",
  "/BreadCrumbs.story.vue": "<template>\n  <p class=\"pb-3 text-title\">\n    Default breadcrumbs, with 3 items, aligns middle\n  </p>\n  <div>\n    <BreadCrumbs :crumbs=\"crumbs\" />\n  </div>\n\n  <p class=\"pt-6 pb-3 text-title\">Breadcrumbs aligned left</p>\n  <div>\n    <BreadCrumbs :crumbs=\"crumbs\" align=\"left\" />\n  </div>\n\n  <p class=\"pt-6 pb-3 text-title\">Breadcrumbs with 'item 4' as current</p>\n  <div>\n    <BreadCrumbs :crumbs=\"crumbs\" current=\"item 4\" align=\"left\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst route = useRoute();\ninterface Crumbs {\n  [key: string]: string;\n}\n\nconst crumbs = ref<Crumbs>({});\ncrumbs.value[\"item 1\"] = route.path;\ncrumbs.value[\"item 2\"] = route.path;\ncrumbs.value[\"item 3\"] = route.path;\n</script>\n",
  "/Button.story.vue": "<template>\n  <div class=\"flex flex-col gap-4\">\n    <h3 class=\"text-2xl text-title\">Large</h3>\n    <div class=\"flex gap-4\">\n      <Button type=\"primary\" size=\"large\">Primary</Button>\n      <Button type=\"secondary\" size=\"large\">Secondary</Button>\n      <Button type=\"tertiary\" size=\"large\">tertiary</Button>\n      <Button type=\"outline\" size=\"large\">outline</Button>\n      <Button type=\"disabled\" size=\"large\">disabled</Button>\n      <Button type=\"filterWell\" size=\"large\">filterWell</Button>\n    </div>\n\n    <h3 class=\"text-2xl text-title\">Medium</h3>\n    <div class=\"flex gap-4\">\n      <Button type=\"primary\" size=\"medium\">Primary</Button>\n      <Button type=\"secondary\" size=\"medium\">Secondary</Button>\n      <Button type=\"tertiary\" size=\"medium\">tertiary</Button>\n      <Button type=\"outline\" size=\"medium\">outline</Button>\n      <Button type=\"disabled\" size=\"medium\">disabled</Button>\n      <Button type=\"filterWell\" size=\"medium\">filterWell</Button>\n    </div>\n\n    <h3 class=\"text-2xl text-title\">Small</h3>\n    <div class=\"flex gap-4\">\n      <Button type=\"primary\" size=\"small\">Primary</Button>\n      <Button type=\"secondary\" size=\"small\">Secondary</Button>\n      <Button type=\"tertiary\" size=\"small\">tertiary</Button>\n      <Button type=\"outline\" size=\"small\">outline</Button>\n      <Button type=\"disabled\" size=\"small\">disabled</Button>\n      <Button type=\"filterWell\" size=\"small\">filterWell</Button>\n    </div>\n\n    <h3 class=\"text-2xl text-title\">Tiny</h3>\n    <div class=\"flex gap-4\">\n      <Button type=\"primary\" size=\"tiny\">Primary</Button>\n      <Button type=\"secondary\" size=\"tiny\">Secondary</Button>\n      <Button type=\"tertiary\" size=\"tiny\">tertiary</Button>\n      <Button type=\"outline\" size=\"tiny\">outline</Button>\n      <Button type=\"disabled\" size=\"tiny\">disabled</Button>\n      <Button type=\"filterWell\" size=\"tiny\">filterWell</Button>\n    </div>\n\n    <h3 class=\"text-2xl text-title\">Icons</h3>\n    <div class=\"flex gap-4\">\n      <Button type=\"primary\" size=\"medium\" icon=\"filter\" iconPosition=\"left\">\n        Filter\n      </Button>\n      <Button type=\"primary\" size=\"small\" icon=\"filter\" iconPosition=\"right\">\n        Filter\n      </Button>\n      <Button type=\"secondary\" size=\"small\" icon=\"star\" iconPosition=\"left\">\n        Star\n      </Button>\n      <Button\n        type=\"secondary\"\n        size=\"small\"\n        icon=\"CaretDown\"\n        iconPosition=\"right\"\n      >\n        CaretDown\n      </Button>\n    </div>\n\n    <h3 class=\"text-2xl text-title\">Icon only</h3>\n    <div class=\"flex flex-col gap-4\">\n      <div class=\"flex gap-4\">\n        <Button iconOnly icon=\"plus\" label=\"add\" />\n        <Button iconOnly icon=\"plus\" label=\"add\" type=\"secondary\" />\n        <Button iconOnly icon=\"plus\" label=\"add\" type=\"tertiary\" />\n        <Button iconOnly icon=\"plus\" label=\"add\" type=\"outline\" />\n        <Button iconOnly icon=\"plus\" label=\"add\" type=\"disabled\" />\n        <Button iconOnly icon=\"plus\" label=\"add\" type=\"filterWell\" />\n      </div>\n\n      <div class=\"flex gap-4\">\n        <Button iconOnly icon=\"trash\" label=\"Remove\" />\n        <Button iconOnly icon=\"trash\" label=\"Remove\" type=\"secondary\" />\n        <Button iconOnly icon=\"trash\" label=\"Remove\" type=\"tertiary\" />\n        <Button iconOnly icon=\"trash\" label=\"Remove\" type=\"outline\" />\n        <Button iconOnly icon=\"trash\" label=\"Remove\" type=\"disabled\" />\n        <Button iconOnly icon=\"trash\" label=\"Remove\" type=\"filterWell\" />\n      </div>\n\n      <div class=\"flex gap-4\">\n        <Button iconOnly icon=\"caret-up\" label=\"previous\" />\n        <Button iconOnly icon=\"caret-up\" label=\"previous\" type=\"secondary\" />\n        <Button iconOnly icon=\"caret-up\" label=\"previous\" type=\"tertiary\" />\n        <Button iconOnly icon=\"caret-up\" label=\"previous\" type=\"outline\" />\n        <Button iconOnly icon=\"caret-up\" label=\"previous\" type=\"disabled\" />\n        <Button iconOnly icon=\"caret-up\" label=\"previous\" type=\"filterWell\" />\n      </div>\n\n      <div class=\"flex gap-4\">\n        <Button iconOnly icon=\"caret-down\" label=\"next\" />\n        <Button iconOnly icon=\"caret-down\" label=\"next\" type=\"secondary\" />\n        <Button iconOnly icon=\"caret-down\" label=\"next\" type=\"tertiary\" />\n        <Button iconOnly icon=\"caret-down\" label=\"next\" type=\"outline\" />\n        <Button iconOnly icon=\"caret-down\" label=\"next\" type=\"disabled\" />\n        <Button iconOnly icon=\"caret-down\" label=\"next\" type=\"filterWell\" />\n      </div>\n\n      <!-- do not render by default to avoid errors on clean load-->\n      <div v-if=\"route.query.showError\" class=\"flex gap-4\">\n        <!-- this should result in an error ( due to missing label)-->\n        <Button iconOnly icon=\"plus\"></Button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst route = useRoute();\n</script>\n",
  "/ButtonBar.story.vue": "<template>\n  <ButtonBar>\n    <Button icon=\"caret-up\" size=\"small\">one</Button>\n  </ButtonBar>\n\n  <ButtonBar class=\"mt-4\">\n    <Button icon=\"caret-up\" size=\"small\">one </Button>\n    <Button icon=\"caret-down\" size=\"small\">two</Button>\n  </ButtonBar>\n\n  <ButtonBar class=\"mt-4\">\n    <Button icon=\"caret-up\" size=\"small\">one </Button>\n    <Button icon=\"info\" size=\"small\">two </Button>\n    <Button icon=\"caret-down\" size=\"small\">three</Button>\n    <Button icon=\"trash\" size=\"small\">four</Button>\n  </ButtonBar>\n\n  <ButtonBar class=\"mt-4\">\n    <Button :icon-only=\"true\" icon=\"caret-up\" label=\"up up up !\" />\n    <Button :icon-only=\"true\" icon=\"caret-down\" label=\"going down\" />\n  </ButtonBar>\n</template>\n",
  "/ButtonDropdown.story.vue": "<template>\n  <div class=\"flex gap-10\">\n    <ButtonDropdown label=\"basic\">\n      <section class=\"flex bg-white p-4 w-52\">\n        <p>\n          Behind every exquisite thing that existed, there was something tragic.\n        </p>\n      </section>\n    </ButtonDropdown>\n\n    <hr />\n\n    <ButtonDropdown label=\"list\">\n      <section class=\"flex bg-white p-4 w-52\">\n        <InputList\n          id=\"dropdown-list\"\n          :nodes=\"[\n            {\n              name: 'Items 1',\n            },\n            {\n              name: 'Item 2',\n            },\n            {\n              name: 'Item 3',\n            },\n          ]\"\n          v-model=\"selectedNodesNames\"\n          :inverted=\"true\"\n        />\n      </section>\n    </ButtonDropdown>\n\n    <span v-if=\"selectedNodesNames.length\">{{ selectedNodesNames }}</span>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst selectedNodesNames = ref([]);\n</script>\n",
  "/CustomTooltip.story.vue": "<template>\n  <CustomTooltip label=\"my-label\" content=\"my content\" />\n</template>\n",
  "/DataFetch.other.vue": "<script setup lang=\"ts\">\ntype Resp<T> = {\n  data: Record<string, T[]>;\n};\n\ninterface Schema {\n  id: string;\n  label: string;\n  description: string;\n}\n\nconst { data } = await useFetch<Resp<Schema>>(\"/graphql\", {\n  key: \"databases\",\n  method: \"POST\",\n  body: { query: `{ _schemas { id,label,description } }` },\n});\n\nconst databases = computed(\n  () =>\n    data.value?.data?._schemas.sort((a, b) => a.label.localeCompare(b.label)) ??\n    []\n);\n\nconst schemaId = ref(\n  databases.value.find((d) => d.label === \"pet store\" || d.id === \"catalogue\")\n    ?.id || \"\"\n);\n\nconst schemaOptions = computed(() =>\n  databases.value.map((schema) => schema.id)\n);\n\nconst {\n  data: metadata,\n  pending: metadataPending,\n  error: metadataError,\n  refresh: refetchMetadata,\n} = await useLazyAsyncData(\"my meta data\", () => fetchMetadata(schemaId.value));\n\nconst tableId = ref(\"\");\n\nif (metadata.value) {\n  tableId.value = metadata.value.tables[0].id;\n}\n\nconst tableOptions = computed(() => {\n  if (metadata.value) {\n    return metadata.value.tables.map((table) => table.id);\n  } else {\n    return [];\n  }\n});\n\nconst {\n  data: tableData,\n  pending,\n  error,\n  refresh: refetchTableData,\n} = await useLazyAsyncData(\"my data\", () =>\n  fetchTableData(schemaId.value, tableId.value)\n);\n\nwatch(schemaId, async () => {\n  refetchMetadata().then(() => {\n    if (metadata.value) {\n      tableId.value = metadata.value.tables[0].id;\n      refetchTableData();\n    }\n  });\n});\n\nwatch(tableId, async () => {\n  refetchTableData();\n});\n</script>\n\n<template>\n  <h1>Data and Meta data</h1>\n  <div class=\"h-12 mt-4 mb-16\">\n    <h3 class=\"text-heading-lg\">Params</h3>\n    <div class=\"m-2\">\n      <label for=\"schema-id-input\">schema id: </label>\n      <select id=\"table-id-select\" v-model=\"schemaId\">\n        <option v-for=\"option in schemaOptions\" :value=\"option\">\n          {{ option }}\n        </option>\n      </select>\n    </div>\n    <div class=\"m-2\">\n      <label for=\"table-id-select\">table id: </label>\n      <select id=\"table-id-select\" v-model=\"tableId\">\n        <option v-for=\"option in tableOptions\" :value=\"option\">\n          {{ option }}\n        </option>\n      </select>\n    </div>\n  </div>\n\n  <div v-if=\"pending\">Loading...</div>\n  <div v-if=\"error\">Error: {{ error }}</div>\n  <div v-if=\"metadataError\">Meta data Error: {{ metadataError }}</div>\n\n  <div v-if=\"metadata\">\n    <h2>Data for {{ tableId }}:</h2>\n    {{ error }}\n    <pre v-if=\"tableData\">{{ tableData }}</pre>\n\n    <h2>Schema: {{ metadata.label }}</h2>\n    <h2>Tables:</h2>\n\n    <ul class=\"pl-6 list-disc\">\n      <li v-for=\"table in metadata.tables\">\n        {{ table.id }} (type: {{ table.tableType }})\n        <h3>Columns:</h3>\n        <ul class=\"pl-6 pb-3 list-disc\">\n          <li v-for=\"column in table.columns\">\n            {{ column.id }} (type: {{ column.columnType }})\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</template>\n",
  "/DisplayList.story.vue": "<script setup lang=\"ts\">\nconst title = ref(\"My list\");\nconst columnCount = ref(1);\nconst type: Ref<\"standard\" | \"link\"> = ref(\"standard\");\n\nconst numberOfDemoItems = ref(3);\n</script>\n\n<template>\n  <div class=\"flex\">\n    <div class=\"flex-1\">\n      <DisplayList :title=\"title\" :columnCount=\"columnCount\" :type=\"type\">\n        <DisplayListItem v-for=\"index in numberOfDemoItems\"\n          >Item {{ index }}</DisplayListItem\n        >\n      </DisplayList>\n    </div>\n\n    <div class=\"h-12 ml-4 mt-2\">\n      <fieldset class=\"border border-gray-900 mb-2\">\n        <legend class=\"m-2 px-2\">Props</legend>\n        <div class=\"mb-2\">\n          <label\n            class=\"ml-1 text-title hover:cursor-pointer\"\n            for=\"display-list-title\"\n          >\n            title\n          </label>\n          <input\n            id=\"display-list-title\"\n            class=\"ml-2 text-title hover:cursor-pointer\"\n            type=\"text\"\n            v-model=\"title\"\n          />\n        </div>\n        <div class=\"mb-2\">\n          <label\n            class=\"ml-1 text-title hover:cursor-pointer\"\n            for=\"display-list-column-count\"\n          >\n            columnCount\n          </label>\n          <input\n            id=\"display-list-column-count\"\n            class=\"ml-2 text-title hover:cursor-pointer\"\n            type=\"number\"\n            min=\"0\"\n            max=\"3\"\n            v-model=\"columnCount\"\n          />\n        </div>\n        <div class=\"mb-2 ml-1\">\n          <input\n            type=\"radio\"\n            id=\"display-list-type-standard\"\n            value=\"standard\"\n            v-model=\"type\"\n          />\n          <label class=\"mr-3 text-title\" for=\"display-list-type-standard\"\n            >standard</label\n          >\n\n          <input\n            type=\"radio\"\n            id=\"display-list-type-link\"\n            value=\"link\"\n            v-model=\"type\"\n          />\n          <label class=\"text-title\" for=\"display-list-type-link\">link</label>\n        </div>\n      </fieldset>\n\n      <hr />\n\n      <div class=\"mb-2 text-title\">\n        Number of demo items:\n        <input type=\"number\" v-model=\"numberOfDemoItems\" />\n      </div>\n    </div>\n  </div>\n</template>\n",
  "/FilterSearch.story.vue": "<script setup lang=\"ts\">\nconst searchValue = ref(\"\");\nconst inverted = ref(false);\n</script>\n<template>\n  <div class=\"p-5\">\n    <FilterSearch v-model=\"searchValue\" :inverted=\"inverted\" />\n  </div>\n\n  <div class=\"mt-4\">\n    <hr />\n    <p class=\"text-title\">Search value: {{ searchValue }}</p>\n    <span class=\"text-title\">\n      (note: the search input has a fixed 500ms update delay)</span\n    >\n    <div class=\"mt-4\">\n      <button\n        @click=\"searchValue = ''\"\n        class=\"bg-blue-500 hover:bg-blue-700 text-title py-2 px-4 rounded\"\n      >\n        clear value\n      </button>\n    </div>\n    <div>\n      <input id=\"inverted\" type=\"checkbox\" v-model=\"inverted\" />\n      <label class=\"ml-1 text-title\" for=\"inverted\">inverted colors</label>\n    </div>\n  </div>\n</template>\n",
  "/FooterComponent.story.vue": "<template>\n  <FooterComponent />\n\n  <hr class=\"my-3\" />\n\n  <FooterComponent>I am in a slot</FooterComponent>\n</template>\n",
  "/Form.story.vue": "<script setup lang=\"ts\">\nimport type {\n  columnValue,\n  IFieldError,\n  ISchemaMetaData,\n} from \"../../metadata-utils/src/types\";\nimport { useRoute } from \"#app/composables/router\";\nimport type { FormFields } from \"#components\";\n\ntype Resp<T> = {\n  data: Record<string, T[]>;\n};\n\ninterface Schema {\n  id: string;\n  label: string;\n  description: string;\n}\n\nconst route = useRoute();\nconst schemaId = ref((route.query.schema as string) ?? \"type test\");\nconst tableId = ref((route.query.table as string) ?? \"Types\");\nconst rowIndex = ref<null | number>(null);\nif (route.query.rowIndex) {\n  rowIndex.value = parseInt(route.query.rowIndex as string);\n}\n\nconst numberOfRows = ref(0);\nconst formFields = ref<InstanceType<typeof FormFields>>();\nconst formValues = ref<Record<string, columnValue>>({});\nconst errors = ref<Record<string, IFieldError[]>>({});\n\nconst { data: schemas } = await useFetch<Resp<Schema>>(\"/graphql\", {\n  key: \"schemas\",\n  method: \"POST\",\n  body: { query: `{ _schemas { id,label,description } }` },\n});\n\nconst schemaIds = computed(\n  () =>\n    schemas.value?.data?._schemas\n      .sort((a, b) => a.label.localeCompare(b.label))\n      .map((s) => s.id) ?? []\n);\n\nconst {\n  data: schemaMeta,\n  refresh,\n  status,\n} = await useAsyncData(\"form sample\", () => fetchMetadata(schemaId.value));\n\nasync function getNumberOfRows() {\n  const resp = await $fetch(`/${schemaId.value}/graphql`, {\n    method: \"POST\",\n    body: {\n      query: `query ${tableId.value} {\n          ${tableId.value}_agg {\n            count\n          }\n        }`,\n    },\n  });\n  numberOfRows.value = resp.data[tableId.value + \"_agg\"].count;\n}\n\nasync function fetchRow(rowNumber: number) {\n  const resp = await fetchTableData(schemaId.value, tableId.value, {\n    limit: 1,\n    offset: rowNumber,\n  });\n\n  formValues.value = resp.rows[0];\n}\n\nconst schemaTablesIds = computed(() =>\n  (schemaMeta.value as ISchemaMetaData)?.tables.map((table) => table.id)\n);\n\nconst tableMeta = computed(() => {\n  return schemaMeta.value === null\n    ? null\n    : schemaMeta.value.tables.find((table) => table.id === tableId.value);\n});\n\nfunction onErrors(newErrors: Record<string, IFieldError[]>) {\n  errors.value = newErrors;\n}\n\nwatch(\n  () => schemaId.value,\n  async () => {\n    if (schemaMeta.value) {\n      await refresh();\n      tableId.value = schemaMeta.value.tables[0].id;\n      useRouter().push({\n        query: {\n          schema: schemaId.value,\n        },\n      });\n    }\n  }\n);\n\nwatch(\n  () => tableId.value,\n  async (newTableId, oldTableId) => {\n    if (oldTableId !== newTableId && oldTableId !== undefined) {\n      rowIndex.value = null;\n    }\n    const query: { schema: string; table: string; rowIndex?: number } = {\n      schema: schemaId.value,\n      table: tableId.value,\n    };\n    if (rowIndex.value !== null) {\n      query.rowIndex = rowIndex.value;\n    }\n\n    useRouter().push({ query });\n    getNumberOfRows();\n    formValues.value = {};\n  },\n  { immediate: true }\n);\n\nwatch(\n  () => rowIndex.value,\n  async () => {\n    const query: { schema: string; table: string; rowIndex?: number } = {\n      schema: schemaId.value,\n      table: tableId.value,\n    };\n    if (rowIndex.value !== null) {\n      query.rowIndex = rowIndex.value;\n    }\n    useRouter().push({ query });\n\n    formValues.value = {};\n\n    if (rowIndex.value !== null) {\n      fetchRow(rowIndex.value - 1);\n    }\n  },\n  { immediate: true }\n);\n</script>\n\n<template>\n  <div class=\"flex flex-row\">\n    <div class=\"2/3 p-8 border-l\">\n      <FormFields\n        id=\"forms-story\"\n        v-if=\"schemaId && tableMeta && status === 'success'\"\n        ref=\"formFields\"\n        :schemaId=\"schemaId\"\n        :metadata=\"tableMeta\"\n        v-model=\"formValues\"\n        @error=\"onErrors($event)\"\n      />\n    </div>\n    <div class=\"basis-1/3 ml-2 h-screen\">\n      <h2>Demo controls, settings and status</h2>\n\n      <div class=\"p-4 border-2 mb-2 flex flex-col gap-4\">\n        <div class=\"flex flex-col\">\n          <label for=\"table-select\" class=\"text-title font-bold\"\n            >Schema:\n          </label>\n          <select\n            id=\"table-select\"\n            v-model=\"schemaId\"\n            class=\"border border-black\"\n          >\n            <option v-for=\"schemaId in schemaIds\" :value=\"schemaId\">\n              {{ schemaId }}\n            </option>\n          </select>\n        </div>\n\n        <div class=\"flex flex-col\">\n          <label for=\"table-select\" class=\"text-title font-bold\">Table: </label>\n          <select\n            id=\"table-select\"\n            v-model=\"tableId\"\n            class=\"border border-black\"\n          >\n            <option v-for=\"tableId in schemaTablesIds\" :value=\"tableId\">\n              {{ tableId }}\n            </option>\n          </select>\n        </div>\n\n        <div>\n          This table has {{ numberOfRows }} rows\n          <div class=\"flex flex-col\">\n            <label for=\"row-select\" class=\"text-title font-bold\"\n              >Show row:\n            </label>\n            <select\n              id=\"row-select\"\n              v-model=\"rowIndex\"\n              class=\"border border-black\"\n            >\n              <option :value=\"null\">none</option>\n              <option v-for=\"index in numberOfRows\" :value=\"index\">\n                {{ index }}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"mt-4 flex flex-row\">\n          <div v-if=\"Object.keys(formValues).length\" class=\"basis-1/2\">\n            <h3 class=\"text-label\">Values</h3>\n            <dl class=\"flex flex-col\">\n              <template v-for=\"(value, key) in formValues\">\n                <dt class=\"font-bold\">{{ key }}:</dt>\n                <dd v-if=\"value !== null && value !== undefined\" class=\"pl-3\">\n                  {{ value }}\n                </dd>\n              </template>\n            </dl>\n          </div>\n          <div v-if=\"Object.keys(errors).length\" class=\"basis-1/2\">\n            <h3 class=\"text-label\">Errors</h3>\n\n            <dl class=\"flex flex-col\">\n              <template v-for=\"(value, key) in errors\">\n                <dt class=\"font-bold\">{{ key }}:</dt>\n                <dd v-if=\"value.length\" class=\"ml-1\">{{ value }}</dd>\n              </template>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n",
  "/FormField.story.vue": "<template>\n  <InputTestContainer\n    show-placeholder\n    show-state\n    show-required\n    show-error-message\n  >\n    <template\n      v-slot:default=\"{\n        placeholder,\n        valid,\n        invalid,\n        disabled,\n        required,\n        errorMessage,\n      }\"\n    >\n      <template v-for=\"type in Object.keys(demoValue)\">\n        <FormField\n          :type=\"type as CellValueType\"\n          v-model=\"demoValue[type]\"\n          :id=\"'input-' + type\"\n          :placeholder=\"placeholder\"\n          :valid=\"valid\"\n          :invalid=\"invalid\"\n          :disabled=\"disabled\"\n          :errorMessage=\"errorMessage || null\"\n          :options=\"demoOptions\"\n          :label=\"'Demo input for type=' + type\"\n          :required=\"required\"\n          refSchemaId=\"pet store\"\n          refTableId=\"Pet\"\n          refLabel=\"${name}\"\n          description=\"here a demo description to see that that works too\"\n          @blur=\"blurCount++\"\n          @focus=\"focusCount++\"\n        />\n      </template>\n    </template>\n    <template #settings>\n      <div class=\"mt-4\">blurCount: {{ blurCount }}</div>\n      <div class=\"mt-4\">focusCount: {{ focusCount }}</div>\n      <div class=\"mt-4\">value: {{ demoValue }}</div>\n    </template>\n  </InputTestContainer>\n</template>\n\n<script setup lang=\"ts\">\nimport type { CellValueType } from \"../../metadata-utils/src/types\";\n\nconst demoValue = ref<Record<string, any>>({\n  string: \"test string\",\n  checkbox: [1],\n  radio: 1,\n  select: 1,\n  text: \"some demo text\",\n  ref: null,\n  bool: true,\n});\n\nconst focusCount = ref(0);\nconst blurCount = ref(0);\n\nconst demoOptions = ref([\n  { label: \"option1\", value: 1 },\n  { label: \"option2\", value: 2 },\n]);\n</script>\n",
  "/Header.story.vue": "<template>\n  <div>\n    <Header>\n      <template #logo>\n        <Logo />\n      </template>\n      <template #nav>\n        <Navigation\n          :navigation=\"[\n            { label: 'Home', link: '#' },\n            { label: 'About', link: '#' },\n            { label: 'Contact', link: '#' },\n          ]\"\n        />\n      </template>\n      <template #logo-mobile>\n        <LogoMobile />\n      </template>\n      <template #nav-mobile>\n        <Navigation\n          :navigation=\"[\n            { label: 'Home', link: '#' },\n            { label: 'About', link: '#' },\n            { label: 'Contact', link: '#' },\n          ]\"\n        />\n      </template>\n    </Header>\n  </div>\n</template>\n",
  "/Icons.story.vue": "<template>\n  <div class=\"flex mb-4\">\n    <div class=\"flex-1\">\n      <div class=\"grid grid-cols-4 gap-4\">\n        <div\n          v-for=\"icon in icons\"\n          class=\"flex flex-col justify-center items-center\"\n        >\n          <label class=\"\">{{ icon }}</label>\n          <div class=\"p-4\">\n            <BaseIcon :name=\"icon\" :class=\"selectedAnimationClass\" />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"h-12 ml-4 mt-2\">\n      <fieldset class=\"border border-gray-900 mb-2 p-1\">\n        <legend class=\"m-2 px-2\">Added classes</legend>\n\n        <label class=\"ml-1 hover:cursor-pointer\" for=\"animation-select\">\n          Animation\n        </label>\n        <div class=\"mb-2\">\n          <select\n            id=\"animation-select\"\n            v-model=\"selectedAnimationClass\"\n            class=\"h-full rounded-md border-1 bg-transparent py-0 pl-2 pr-7 text-gray-500 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm\"\n          >\n            <option value=\"null\">None</option>\n            <option value=\"animate-spin\">animate-spin</option>\n            <option value=\"animate-ping\">animate-ping</option>\n            <option value=\"animate-pulse\">animate-pulse</option>\n            <option value=\"animate-bounce \">animate-bounce</option>\n          </select>\n        </div>\n      </fieldset>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst modules: Record<string, any> = import.meta.glob(\n  \"../components/global/icons/*.vue\",\n  {\n    import: \"default\",\n    eager: true,\n  }\n);\n\nconst icons = Object.keys(modules).map((key: string) => {\n  return key.split(\"/\").reverse()[0].replace(\".vue\", \"\");\n});\n\nconst selectedAnimationClass = ref<string | null>(null);\n</script>\n",
  "/Legend.story.vue": "<template>\n  <div class=\"flex flex-row\">\n    <div class=\"basis-1/2 bg-sidebar-gradient\">\n      <FormLegend :sections=\"sections\" @go-to-section=\"handleGoToRequest\" />\n    </div>\n    <div class=\"basis-1/2 text-title p-4\">\n      <h3>Active section: {{ sections.find((s) => s.isActive) }}</h3>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport type { IFormLegendSection } from \"../../metadata-utils/src/types\";\n\nfunction handleGoToRequest(id: string) {\n  sections.value.forEach((s) => {\n    if (s.id === id) {\n      s.isActive = true;\n    } else {\n      s.isActive = false;\n    }\n  });\n}\n\nconst sections = ref<IFormLegendSection[]>([\n  {\n    label: \"Overview\",\n    id: \"overview\",\n    isActive: true,\n    errorCount: 1,\n  },\n  {\n    label: \"Population\",\n    id: \"population\",\n    errorCount: 2,\n  },\n  {\n    label: \"Contents\",\n    id: \"contents\",\n    errorCount: 0,\n  },\n  {\n    label: \"Access\",\n    id: \"access\",\n    errorCount: 0,\n  },\n  {\n    label: \"Registration\",\n    id: \"data-registration\",\n    errorCount: 16,\n  },\n  {\n    label: \"Information\",\n    id: \"information\",\n    errorCount: 0,\n  },\n]);\n</script>\n",
  "/Logo.story.vue": "<template>\n  <Logo></Logo>\n</template>\n",
  "/LogoMobile.story.vue": "<template>\n  <LogoMobile link=\"#\"></LogoMobile>\n</template>\n",
  "/Message.story.vue": "<template>\n  <Message id=\"notification-msg-1\" :invalid=\"true\">Some invalid</Message>\n  <Message id=\"notification-msg-2\" :valid=\"true\">Some success</Message>\n  <Message id=\"notification-msg-3\">Generic message</Message>\n</template>\n<script setup lang=\"ts\"></script>\n",
  "/Modal.story.vue": "<script setup lang=\"ts\">\nimport Modal from \"@/components/Modal.vue\";\nconst modal = ref<InstanceType<typeof Modal>>();\n\nfunction showModal() {\n  modal.value?.show();\n}\n\nlet sectionCount = ref(0);\n</script>\n\n<template>\n  <button\n    @click=\"showModal\"\n    class=\"flex items-center border rounded-full h-10.5 px-5 text-heading-lg gap-3 tracking-widest uppercase font-display bg-button-primary text-button-primary border-button-primary hover:bg-button-primary-hover hover:text-button-primary-hover hover:border-button-primary-hover\"\n  >\n    Open modal 🙈\n  </button>\n  <Modal ref=\"modal\" title=\"Title\" subtitle=\"Subtitle\">\n    <p class=\"pb-2\">\n      Good resolutions are useless attempts to interfere with scientific laws.\n      Their origin is pure vanity. Their result is absolutely nil. They give us,\n      now and then, some of those luxurious sterile emotions that have a certain\n      charm for the weak. That is all that can be said for them. They are simply\n      cheques that men draw on a bank where they have no account.\n    </p>\n    <div class=\"flex flex-wrap gap-5\">\n      <button\n        @click=\"sectionCount++\"\n        class=\"flex items-center border rounded-full h-10.5 px-5 text-heading-lg gap-3 tracking-widest uppercase font-display bg-button-tertiary text-button-tertiary border-button-tertiary hover:bg-button-tertiary-hover hover:text-button-tertiary-hover hover:border-button-tertiary-hover\"\n      >\n        add content\n      </button>\n      <button\n        @click=\"sectionCount--\"\n        class=\"flex items-center border rounded-full h-10.5 px-5 text-heading-lg gap-3 tracking-widest uppercase font-display bg-button-tertiary text-button-tertiary border-button-tertiary hover:bg-button-tertiary-hover hover:text-button-tertiary-hover hover:border-button-tertiary-hover\"\n      >\n        remove content\n      </button>\n    </div>\n    <p v-for=\"index in sectionCount\" class=\"pb-2\">\n      Good resolutions are useless attempts to interfere with scientific laws.\n      Their origin is pure vanity. Their result is absolutely nil. They give us,\n      now and then, some of those luxurious sterile emotions that have a certain\n      charm for the weak. That is all that can be said for them. They are simply\n      cheques that men draw on a bank where they have no account.\n    </p>\n  </Modal>\n</template>\n",
  "/Navigation.story.vue": "<template>\n  <Navigation\n    :navigation=\"[\n      { label: 'Home', link: '#' },\n      { label: 'About', link: '#' },\n      { label: 'Contact', link: '#' },\n    ]\"\n  />\n</template>\n",
  "/Pagination.story.vue": "<template>\n  <Pagination :currentPage=\"1\" :totalPages=\"10\" @update=\"updatePage\" />\n\n  <Pagination\n    :currentPage=\"24\"\n    :totalPages=\"999\"\n    :preventDefault=\"true\"\n    @update=\"updatePage\"\n  />\n\n  <hr class=\"my-3\" />\n\n  <span>inverted = true:</span>\n  <Pagination\n    :currentPage=\"1\"\n    :totalPages=\"10\"\n    :inverted=\"true\"\n    @update=\"updatePage\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nfunction updatePage(page: number) {\n  alert(`Navigating to page ${page}`);\n}\n</script>\n",
  "/SideModal.story.vue": "<script setup lang=\"ts\">\nimport type { SideModal } from \"#build/components\";\n\nconst showSidePanel = ref(false);\nconst fullScreen = ref(false);\nconst slideInRight = ref(true);\nconst buttonAlignment = ref<\"left\" | \"center\" | \"right\">(\"right\");\n\nfunction toggle() {\n  showSidePanel.value = !showSidePanel.value;\n}\n\nfunction toggleViaRef() {\n  if (sideModal.value && sideModal.value.showModal) {\n    console.log(\"toggleViaRef\", sideModal.value);\n    sideModal.value.showModal();\n  }\n}\n\nconst sideModal = ref<InstanceType<typeof SideModal>>();\n</script>\n<template>\n  <div class=\"p-12\">\n    <div class=\"flex gap-3\">\n      <button\n        @click=\"toggle\"\n        class=\"flex items-center border rounded-full h-10.5 px-5 text-heading-lg gap-3 tracking-widest uppercase font-display bg-button-primary text-button-primary border-button-primary hover:bg-button-primary-hover hover:text-button-primary-hover hover:border-button-primary-hover\"\n      >\n        Open side modal 🙈\n      </button>\n\n      <button\n        @click=\"toggleViaRef\"\n        class=\"flex items-center border rounded-full h-10.5 px-5 text-heading-lg gap-3 tracking-widest uppercase font-display bg-button-primary text-button-primary border-button-primary hover:bg-button-primary-hover hover:text-button-primary-hover hover:border-button-primary-hover\"\n      >\n        Open via ref 🫣\n      </button>\n    </div>\n\n    <fieldset class=\"border border-gray-900 mb-2\">\n      <legend class=\"m-2 px-2\">Props</legend>\n      <div class=\"mb-2 pr-2\">\n        <input\n          id=\"side-modal-full-screen\"\n          class=\"ml-2 hover:cursor-pointer\"\n          type=\"checkbox\"\n          v-model=\"fullScreen\"\n        />\n        <label class=\"ml-1 hover:cursor-pointer\" for=\"side-modal-full-screen\">\n          full-screen\n        </label>\n      </div>\n      <div class=\"mb-2\">\n        <input\n          id=\"side-modal-slide-in-right\"\n          class=\"ml-2 hover:cursor-pointer\"\n          type=\"checkbox\"\n          v-model=\"slideInRight\"\n        />\n        <label\n          class=\"ml-1 hover:cursor-pointer\"\n          for=\"side-modal-slide-in-right\"\n        >\n          slide-in-right\n        </label>\n      </div>\n      <div class=\"mb-2\">\n        <select\n          class=\"ml-2 hover:cursor-pointer\"\n          id=\"side-modal-button-alignment\"\n          v-model=\"buttonAlignment\"\n        >\n          <option value=\"left\">left</option>\n          <option value=\"center\">center</option>\n          <option value=\"right\">right</option>\n        </select>\n        <label\n          class=\"ml-1 hover:cursor-pointer\"\n          for=\"side-modal-button-alignment\"\n        >\n          buttonAlignment\n        </label>\n      </div>\n    </fieldset>\n  </div>\n  <SideModal\n    :show=\"showSidePanel\"\n    :fullScreen=\"fullScreen\"\n    :slideInRight=\"slideInRight\"\n    :buttonAlignment=\"buttonAlignment\"\n    @close=\"showSidePanel = false\"\n    ref=\"sideModal\"\n  >\n    <ContentBlockModal title=\"Side modal\">\n      <p>\n        Good resolutions are useless attempts to interfere with scientific laws.\n        Their origin is pure vanity. Their result is absolutely nil. They give\n        us, now and then, some of those luxurious sterile emotions that have a\n        certain charm for the weak. That is all that can be said for them. They\n        are simply cheques that men draw on a bank where they have no account.\n      </p>\n    </ContentBlockModal>\n  </SideModal>\n</template>\n",
  "/Styles.other.vue": "<template>\n  <h1 class=\"text-heading-3xl text-title\">Theme Styles</h1>\n\n  <h2 class=\"text-heading-2xl text-title py-4\">Colors</h2>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">blue</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"blue-50\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"blue-100\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"blue-200\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"blue-300\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"blue-500\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"blue-700\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"blue-800\" type=\"background\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">gray</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"gray-100\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"gray-200\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"gray-400\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"gray-600\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"gray-900\" type=\"background\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">gray</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"gray-100\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"gray-200\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"gray-400\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"gray-600\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"gray-900\" type=\"background\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">yellow</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"yellow-200\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"yellow-500\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"yellow-800\" type=\"background\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">green</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"green-500\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"green-800\" type=\"background\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">orange</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"orange-500\" type=\"background\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">red</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"red-500\" type=\"background\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">Background colors</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"button-primary\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-primary\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-primary-hover\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-secondary\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-secondary-hover\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-tertiary\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-tertiary-hover\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-outline\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-outline-hover\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-disabled\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-disabled-hover\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-button\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-button-hover\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"navigation\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-results-view-tabs\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-group-toggle\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"app-wrapper\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"pagination\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"pagination-hover\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"footer\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"modal-footer\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"tab\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"tab-hover\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"tab-active\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"disabled\" type=\"background\" />\n    </li>\n    <li>\n      <ColorTile color=\"invalid\" type=\"background\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">Text colors</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"button-primary\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-primary-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-secondary\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-secondary-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-tertiary\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-tertiary-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-outline\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-outline-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-disabled\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-disabled-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"menu\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"sub-menu\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"sub-menu-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"breadcrumb-arrow\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"breadcrumb\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"title\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"title-contrast\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"sub-title-contrast\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-button\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-button-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"favorite\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"favorite-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-results-view-tabs\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-results-view-tabs-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-title\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-expand\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-expand-mobile\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-group-title\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-group-title-mobile\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-group-checkbox\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-group-toggle\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-title-inverted\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-expand-inverted\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-group-title-inverted\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-group-checkbox-inverted\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-filter-group-toggle-inverted\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"tooltip-hover-dark\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"tooltip-hover-light\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"pagination\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"pagination-input\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"pagination-hover\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"link\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"table-column-header\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"invalid\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"valid\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"disabled\" type=\"text\" />\n    </li>\n    <li>\n      <ColorTile color=\"required\" type=\"text\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">Border colors</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"button-primary\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-primary-hover\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-secondary\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-secondary-hover\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-tertiary\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-tertiary-hover\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-outline\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-outline-hover\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-disabled\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"button-disabled-hover\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"menu-active\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-button\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-input\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-input-mobile\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"pagination\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"checkbox\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"invalid\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"valid\" type=\"border\" />\n    </li>\n    <li>\n      <ColorTile color=\"disabled\" type=\"border\" />\n    </li>\n  </ol>\n\n  <h3 class=\"text-heading-1xl text-title py-3\">Border radius</h3>\n  <ol class=\"flex flex-wrap mb-4 mt-6\">\n    <li>\n      <ColorTile color=\"button-primary\" type=\"radius\" />\n    </li>\n    <li>\n      <ColorTile color=\"3px\" type=\"radius\" />\n    </li>\n    <li>\n      <ColorTile color=\"50px\" type=\"radius\" />\n    </li>\n    <li>\n      <ColorTile color=\"textarea-input\" type=\"radius\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-input\" type=\"radius\" />\n    </li>\n    <li>\n      <ColorTile color=\"search-button\" type=\"radius\" />\n    </li>\n    <li>\n      <ColorTile color=\"pagination\" type=\"radius\" />\n    </li>\n    <li>\n      <ColorTile color=\"landing\" type=\"radius\" />\n    </li>\n  </ol>\n</template>\n",
  "/index.vue": "<script setup lang=\"ts\">\nconst modules = import.meta.glob(\"./**/*.story.vue\", {\n  import: \"default\",\n  eager: true,\n});\n\nconst stories = Object.entries(modules).map(([key, value]) => {\n  const title = key.replace(\"./\", \"\").replace(\".story.vue\", \"\");\n  return { title, component: value };\n});\n</script>\n\n<template>\n  <div\n    v-for=\"story in stories\"\n    class=\"mt-1 px-4 pt-2 pb-12 first:mt-8 last:mb-8 border-b-2\"\n  >\n    <h2 class=\"text-heading-4xl text-title my-3\">{{ story.title }}</h2>\n\n    <div>\n      <component :is=\"story.component\" />\n    </div>\n  </div>\n</template>\n",
  "/input/Boolean.story.vue": "<template>\n  <InputTestContainer show-state v-slot:default=\"{ valid, invalid, disabled }\">\n    <InputBoolean\n      id=\"boolean-story-id\"\n      v-model=\"modelValue1\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n    />\n    <div class=\"my-4\">intit empty: {{ modelValue1 }}</div>\n\n    <InputBoolean\n      id=\"boolean-story-id2\"\n      v-model=\"modelValue2\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n    />\n    <div class=\"my-4\">init true: {{ modelValue2 }}</div>\n\n    <InputBoolean\n      id=\"boolean-story-id3\"\n      v-model=\"modelValue3\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n    />\n    <div class=\"my-4\">init false: {{ modelValue3 }}</div>\n\n    <InputBoolean\n      id=\"boolean-story-id4\"\n      v-model=\"politeBoolean\"\n      true-label=\"Yes please !\"\n      false-label=\"No thank you\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n    />\n  </InputTestContainer>\n  <div class=\"my-4\">Be polite: {{ politeBoolean }}</div>\n</template>\n\n<script lang=\"ts\" setup>\nconst modelValue1 = ref<null>(null);\nconst modelValue2 = ref<boolean>(true);\nconst modelValue3 = ref<boolean>(false);\nconst politeBoolean = ref<boolean>(false);\n</script>\n",
  "/input/CheckboxGroup.story.vue": "<script setup lang=\"ts\">\nconst groupSelection = ref<string[]>([\"tomatoes\", \"basil\"]);\n</script>\n\n<template>\n  <InputTestContainer show-state v-slot=\"{ invalid, valid, disabled }\">\n    <fieldset>\n      <legend class=\"text-title\">\n        Which toppings would you like on your pizza? You may select more than\n        one.\n      </legend>\n      <InputCheckboxGroup\n        id=\"example-4\"\n        v-model=\"groupSelection\"\n        :valid=\"valid\"\n        :invalid=\"invalid\"\n        :disabled=\"disabled\"\n        :options=\"[\n          {\n            value: 'tomatoes',\n            label: 'Roma tomatoes',\n          },\n          {\n            value: 'pepperoni',\n            label: 'Pepperoni',\n          },\n          {\n            value: 'mozzerella',\n            label: 'Fresh mozzerella',\n          },\n          {\n            value: 'chillies',\n            label: 'Chillies',\n          },\n          {\n            value: 'basil',\n            label: 'Fresh basil',\n          },\n        ]\"\n        :showClearButton=\"true\"\n      />\n    </fieldset>\n  </InputTestContainer>\n  <output>\n    <span>Selection: {{ groupSelection }}</span>\n  </output>\n</template>\n",
  "/input/Date.story.vue": "<template>\n  <InputTestContainer\n    show-placeholder\n    show-state\n    v-slot=\"{ placeholder, valid, invalid, disabled }\"\n  >\n    <label for=\"input-date\" class=\"text-title\"> Enter a date </label>\n    <InputDate\n      id=\"input-date\"\n      :placeholder=\"placeholder\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n    />\n  </InputTestContainer>\n</template>\n",
  "/input/DateTime.story.vue": "<template>\n  <InputTestContainer\n    show-placeholder\n    show-state\n    v-slot=\"{ placeholder, valid, invalid, disabled }\"\n  >\n    <label for=\"input-date\" class=\"text-title\"> Enter a date </label>\n    <InputDateTime\n      id=\"input-date-time\"\n      :placeholder=\"placeholder\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n    />\n  </InputTestContainer>\n</template>\n",
  "/input/Email.story.vue": "<template>\n  <h2>Email component</h2>\n  <p>Using a form with input of type email you can have email validation</p>\n  <FormFields\n    id=\"email-form\"\n    schemaId=\"schema-email\"\n    v-model=\"model\"\n    :metadata=\"{\n      id: 'email-form',\n      label: 'Email Form',\n      tableType: 'FORM',\n      columns: [\n        {\n          id: 'input-email',\n          columnType: 'EMAIL',\n          label: 'Input an email address',\n        },\n      ],\n    }\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nconst model = ref({ \"input-email\": null });\n</script>\n",
  "/input/File.story.vue": "<template>\n  <InputTestContainer show-state v-slot=\"{ valid, invalid, disabled }\">\n    <label for=\"file-input-demo-file-input\" class=\"block mb-2\"\n      >Select a file to import.</label\n    >\n    <InputFile\n      id=\"file-input-demo\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n      @update:modelValue=\"(value: columnValueObject) => (file = value)\"\n    />\n  </InputTestContainer>\n  <form @submit.prevent></form>\n  <h3 class=\"text-heading-lg my-2\">Data output</h3>\n  <output\n    class=\"block w-full mt-2 bg-gray-100 py-3 px-2 pl-6 h-30 overflow-y-scroll shadow-inner\"\n  >\n    <pre class=\"indent-[-5em]\">\n        {{ file }}\n      </pre\n    >\n  </output>\n</template>\n\n<script setup lang=\"ts\">\nimport type { columnValueObject } from \"../../../metadata-utils/src/types\";\nconst file = ref<columnValueObject>();\n</script>\n",
  "/input/Hyperlink.story.vue": "<template>\n  <p>\n    The <code>Hyperlink Component</code> enables you to use the String component\n    with the added validation of the input being a hyperlink.\n  </p>\n  <FormFields\n    id=\"form-hyperlink\"\n    schemaId=\"schema-hyperlink\"\n    :metadata=\"{\n      label: 'Hyperlink',\n      id: 'hyperlink',\n      tableType: 'my kind of table',\n      columns: [\n        {\n          id: 'input-hyperlink',\n          columnType: 'HYPERLINK',\n          label: 'Input a hyperlink',\n        },\n      ],\n    }\"\n    v-model=\"model\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nconst model = ref({ \"input-hyperlink\": null });\n</script>\n",
  "/input/Label.story.vue": "<script setup lang=\"ts\">\nconst label = \"Search for patients\";\n</script>\n\n<template>\n  <div\n    class=\"grid grid-cols-2 gap-6 my-5 [&>div]:bg-white [&>div]:p-4 [&_h3]:font-semibold [&_h3]:my-2\"\n  >\n    <div>\n      <h3>Input Label: default use</h3>\n      <InputLabel for=\"input-string-default\">\n        {{ label }}\n      </InputLabel>\n    </div>\n    <div>\n      <h3>Input Label: disabled</h3>\n      <InputLabel for=\"input-string-disabled\" :disabled=\"true\">\n        {{ label }}\n      </InputLabel>\n    </div>\n    <div>\n      <h3>Input Text: as a required field</h3>\n      <InputLabel for=\"input-string-required\" :required=\"true\">\n        {{ label }}\n      </InputLabel>\n    </div>\n    <div>\n      <h3>Input Label: positive validation result</h3>\n      <InputLabel for=\"input-string-valid\" :valid=\"true\">\n        {{ label }}\n      </InputLabel>\n    </div>\n    <div>\n      <h3>Input Label: negative validation result</h3>\n      <InputLabel for=\"input-string-error\" :has-error=\"true\">\n        {{ label }}\n      </InputLabel>\n    </div>\n    <div>\n      <h3>Input Label: visually hidden label</h3>\n      <InputLabel for=\"input-string-hidden-label\" :hide-label=\"true\">\n        {{ label }}\n      </InputLabel>\n    </div>\n  </div>\n</template>\n",
  "/input/List.story.vue": "<script setup lang=\"ts\">\nimport type { INode } from \"~/types/types\";\n\nfunction generateListData(length: number) {\n  const nodes = [];\n  for (let i = 0; i < length; i++) {\n    const name = `Node ${i}`;\n    const node: INode = {\n      name,\n      description: `Description for ${name}`,\n    };\n\n    nodes.push(node);\n  }\n  return nodes;\n}\n\nconst length = 7;\nconst nodes = generateListData(length);\n\nconst selectedNodesNames: Ref<string[]> = ref([]);\n\nconst clearSelection = () => {\n  selectedNodesNames.value = [];\n};\n\nconst deselect = (selectedNodeName: string) => {\n  selectedNodesNames.value = selectedNodesNames.value.filter(\n    (n) => n !== selectedNodeName\n  );\n};\n\nconst inverted = ref(false);\n</script>\n\n<template>\n  <div class=\"flex mb-4\">\n    <div class=\"flex-1\">\n      <InputList\n        :nodes=\"nodes\"\n        v-model=\"selectedNodesNames\"\n        class=\"p-4 text-current\"\n        :class=\"inverted ? 'bg-white' : 'bg-sidebar-gradient'\"\n        :inverted=\"inverted\"\n      />\n    </div>\n\n    <div class=\"h-12 ml-4 mt-2\">\n      <fieldset class=\"border border-gray-900 mb-2\">\n        <legend class=\"m-2 px-2\">Props</legend>\n\n        <div class=\"mb-2\">\n          <input\n            id=\"tree-inverted\"\n            class=\"ml-2 hover:cursor-pointer\"\n            type=\"checkbox\"\n            v-model=\"inverted\"\n          />\n          <label class=\"ml-1 hover:cursor-pointer\" for=\"tree-inverted\">\n            inverted colors\n          </label>\n        </div>\n      </fieldset>\n\n      <div class=\"mb-2\">\n        <button\n          @click=\"clearSelection\"\n          class=\"bg-orange-500 hover:bg-white py-2 px-4 rounded border border-gray-900\"\n        >\n          Clear selection\n        </button>\n      </div>\n      <hr />\n      <div class=\"my-2\">\n        Number off selected nodes: {{ selectedNodesNames.length }}\n      </div>\n      <div>\n        <h3 class=\"font-bold\">Selected nodes:</h3>\n        <ul>\n          <li v-for=\"selectedNodeName in selectedNodesNames\">\n            {{ selectedNodeName }}\n            <button\n              @click=\"deselect(selectedNodeName)\"\n              class=\"bg-gray-400 hover:bg-gray-600 text-white py-0 px-1 mx-1 rounded\"\n            >\n              x\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n",
  "/input/Listbox.story.vue": "<template>\n  <h2 class=\"text-heading-2xl\">Listbox component</h2>\n  <form class=\"mb-6 bg-white rounded p-4\">\n    <legend class=\"mb-2 text-heading-lg\">\n      Configure the listbox component\n    </legend>\n    <div class=\"flex flex-row flex-wrap justify-center items-start gap-4\">\n      <div class=\"p-2 grow\">\n        <InputLabel for=\"listbox-data-type\" class=\"pl-0\">\n          <span>Select the input data type</span>\n        </InputLabel>\n        <InputRadioGroup\n          id=\"listbox-data-type\"\n          v-model=\"listboxDataType\"\n          :options=\"[\n            { value: 'string', label: 'String array' },\n            { value: 'array', label: 'Array of options' },\n          ]\"\n        />\n      </div>\n      <div class=\"p-2 grow\">\n        <InputLabel for=\"listbox-component-state\" class=\"pl-0\">\n          Change the component state\n        </InputLabel>\n        <InputRadioGroup\n          id=\"listbox-component-state\"\n          v-model=\"listboxState\"\n          :options=\"[\n            {\n              value: 'disabled',\n              label: 'Disabled',\n            },\n            {\n              value: 'error',\n              label: 'Error',\n            },\n            {\n              value: 'valid',\n              label: 'Valid',\n            },\n          ]\"\n          :showClearButton=\"true\"\n        />\n      </div>\n      <div class=\"bg-white p-2 grow\">\n        <InputLabel for=\"listbox-placeholder\">\n          Change the default placeholder text\n        </InputLabel>\n        <InputString id=\"listbox-placeholder\" v-model=\"listboxPlaceholder\" />\n      </div>\n    </div>\n  </form>\n  <div class=\"mb-6 bg-white rounded px-6 py-8\">\n    <h3 class=\"text-heading-lg mb-2\">Listbox example</h3>\n    <InputLabel\n      id=\"listbox-input-label\"\n      for=\"listbox-input\"\n      class=\"block mb-3 pl-0\"\n      :disabled=\"listboxState === 'disabled'\"\n      :has-error=\"listboxState === 'error'\"\n    >\n      <span>Select a group assignment</span>\n    </InputLabel>\n    <InputListbox\n      id=\"listbox-input\"\n      labelId=\"listbox-input-label\"\n      :options=\"listboxData\"\n      :invalid=\"listboxState === 'error'\"\n      :valid=\"listboxState === 'valid'\"\n      :disabled=\"listboxState === 'disabled'\"\n      :placeholder=\"listboxPlaceholder\"\n      @update:model-value=\"(value) => (modelValue = value)\"\n    />\n    <output class=\"block w-full mt-6 bg-gray-100 py-3 px-2 pl-6\">\n      <code\n        >Output {{ listboxDataType === \"true\" ? \"Value\" : \"Object\" }}:\n        {{ modelValue }}</code\n      >\n    </output>\n  </div>\n  <div class=\"mb-2 bg-white rounded p-6\">\n    <h3 class=\"text-heading-lg mb-2\">Input data structure</h3>\n    <p>Based on the selection above, the input data is shown below.</p>\n    <output\n      class=\"block w-full mt-6 bg-gray-100 py-3 px-2 pl-6 h-60 overflow-y-scroll shadow-inner\"\n    >\n      <pre class=\"indent-[-5em]\">\n        {{ listboxData }}\n      </pre>\n    </output>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, computed } from \"vue\";\nimport type {\n  IInputValue,\n  IInputValueLabel,\n} from \"../../../metadata-utils/src/types\";\n\nconst modelValue = defineModel<IInputValue | IInputValueLabel>();\nconst letters: string[] = [...Array(26).keys()].map((num) =>\n  String.fromCharCode(num + 65)\n);\n\nconst lettersWithLabels: IInputValueLabel[] = letters.map((letter: string) => {\n  return { value: letter, label: `Group ${letter}` };\n});\n\nconst listboxState = ref<string>(\"\");\nconst listboxPlaceholder = ref<string>(\"Select an option\");\nconst listboxDataType = ref<string>(\"string\");\n\nconst listboxData = computed<IInputValue[] | IInputValueLabel[]>(() => {\n  if (listboxDataType.value === \"string\") {\n    return letters as IInputValue[];\n  } else {\n    return lettersWithLabels as IInputValueLabel[];\n  }\n});\n</script>\n",
  "/input/RadioGroup.story.vue": "<template>\n  <InputTestContainer show-state v-slot=\"{ invalid, valid, disabled }\">\n    <form>\n      <fieldset>\n        <legend class=\"text-title\">\n          Select the patient's group allocation. If unknown, please leave blank.\n        </legend>\n        <InputRadioGroup\n          id=\"radio-input-group\"\n          v-model=\"example\"\n          :options=\"[\n            { value: 'control', label: 'Healthy control' },\n            {\n              value: 'intervention',\n              label: 'Experimental cohort',\n            },\n            { value: 'placebo', label: 'Placebo cohort' },\n          ]\"\n          :show-clear-button=\"true\"\n          :invalid=\"invalid\"\n          :valid=\"valid\"\n          :disabled=\"disabled\"\n        />\n      </fieldset>\n    </form>\n    <output>\n      <span>Selection: {{ example }}</span>\n    </output>\n  </InputTestContainer>\n</template>\n\n<script lang=\"ts\" setup>\nconst example = ref<string>(\"intervention\");\n</script>\n",
  "/input/Ref.story.vue": "<script setup lang=\"ts\">\nconst schemaId = ref<string>(\"pet store\");\nconst tableId = ref<string>(\"Pet\");\nconst labelTemplate = ref<string>(\"${name}\");\nconst value = ref([{ name: \"spike\" }]);\nconst value2 = ref([{ name: \"spike\" }]);\n</script>\n\n<template>\n  <InputTestContainer show-state v-slot=\"{ invalid, valid, disabled }\">\n    <div>\n      <h3>Ref array example</h3>\n      <InputLabel for=\"story-ref-array\"> Select pets by name </InputLabel>\n      <InputRef\n        id=\"story-ref-array\"\n        v-model=\"value\"\n        :refSchemaId=\"schemaId\"\n        :refTableId=\"tableId\"\n        :limit=\"5\"\n        :refLabel=\"labelTemplate\"\n        :valid=\"valid\"\n        :invalid=\"invalid\"\n        :disabled=\"disabled\"\n      />\n      <div class=\"pt-5\">value selected: {{ value }}</div>\n    </div>\n    <div class=\"pt-5\">\n      <h3>Ref example</h3>\n      <InputLabel for=\"story-ref\"> Select pets by name </InputLabel>\n      <InputRef\n        id=\"story-ref\"\n        v-model=\"value2\"\n        :refSchemaId=\"schemaId\"\n        :refTableId=\"tableId\"\n        :limit=\"5\"\n        :refLabel=\"labelTemplate\"\n        :isArray=\"false\"\n        :valid=\"valid\"\n        :invalid=\"invalid\"\n        :disabled=\"disabled\"\n      />\n    </div>\n    <div class=\"pt-5\">value selected: {{ value2 }}</div>\n  </InputTestContainer>\n</template>\n",
  "/input/Search.story.vue": "<script setup lang=\"ts\">\nconst searchValue = ref<string>(\"\");\n</script>\n\n<template>\n  <InputTestContainer\n    show-placeholder\n    show-state\n    v-slot=\"{ placeholder, valid, invalid, disabled }\"\n  >\n    <label for=\"search-input\"> Search </label>\n    <InputSearch\n      v-model=\"searchValue\"\n      :placeholder=\"placeholder\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n      id=\"search-input\"\n    />\n    value: {{ searchValue }}\n  </InputTestContainer>\n</template>\n",
  "/input/Select.story.vue": "<script setup lang=\"ts\">\nconst fieldValue = ref(\"\");\nconst options = [\"option 1\", \"option 2\", \"option 3\", \"option 4\"];\n</script>\n\n<template>\n  <InputTestContainer\n    show-required\n    show-placeholder\n    show-state\n    v-slot=\"{ placeholder, valid, invalid, disabled, required }\"\n  >\n    <InputSelect\n      id=\"story-input-1\"\n      :options=\"options\"\n      v-model=\"fieldValue\"\n      :required=\"required\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n      :placeholder=\"placeholder\"\n    />\n  </InputTestContainer>\n</template>\n",
  "/input/String.story.vue": "<script setup lang=\"ts\">\nconst demoValue = ref(\"test\");\n</script>\n\n<template>\n  <InputTestContainer\n    show-placeholder\n    show-state\n    v-slot=\"{ placeholder, valid, invalid, disabled }\"\n  >\n    <InputString\n      id=\"input-string-default\"\n      v-model=\"demoValue\"\n      :placeholder=\"placeholder\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n    />\n  </InputTestContainer>\n</template>\n",
  "/input/TextArea.story.vue": "<script setup lang=\"ts\">\nconst id = \"story-input-text-area-1\";\nconst fieldValue = ref<string>(\"\");\n</script>\n\n<template>\n  <InputTestContainer\n    show-placeholder\n    show-state\n    v-slot=\"{ placeholder, valid, invalid, disabled }\"\n  >\n    <InputTextArea\n      :id=\"id\"\n      v-model=\"fieldValue\"\n      :valid=\"valid\"\n      :invalid=\"invalid\"\n      :disabled=\"disabled\"\n      :placeholder=\"placeholder\"\n    />\n  </InputTestContainer>\n</template>\n",
  "/input/Tree.story.vue": "<script setup lang=\"ts\">\nimport type { ITreeNode } from \"~/types/types\";\n\nfunction generateTreeData(width: number, depth: number, parentName?: string) {\n  const nodes = [];\n  for (let i = 0; i < width; i++) {\n    const name = parentName ? parentName + `.${i}` : `Node ${i}`;\n    const node: ITreeNode = {\n      name,\n      children: depth > 0 ? generateTreeData(width, depth - 1, name) : [],\n      description: `Description for ${name}`,\n    };\n\n    nodes.push(node);\n  }\n  return nodes;\n}\n\nconst width = 2;\nconst depth = 3;\nconst nodes = generateTreeData(width, depth);\n\nconst selectedNodesNames: Ref<string[]> = ref([]);\n\nconst clearSelection = () => {\n  selectedNodesNames.value = [];\n};\n\nconst deselect = (selectedNodeName: string) => {\n  selectedNodesNames.value = selectedNodesNames.value.filter(\n    (n) => n !== selectedNodeName\n  );\n};\n\nconst inverted = ref(false);\nconst expandSelected = ref(true);\nconst emitSelectedChildren = ref(true);\n</script>\n\n<template>\n  <h1 class=\"text-heading-2xl pb-4\">InputTree</h1>\n  <div class=\"flex flex-row gap-2 mb-4\">\n    <div class=\"basis-3/5\">\n      <InputTree\n        :nodes=\"nodes\"\n        v-model=\"selectedNodesNames\"\n        :expandSelected=\"expandSelected\"\n        class=\"p-4\"\n        :class=\"inverted ? 'bg-white' : 'bg-sidebar-gradient'\"\n        :inverted=\"inverted\"\n        :emitSelectedChildren=\"emitSelectedChildren\"\n      />\n    </div>\n\n    <div class=\"basis-2/5 p-2\">\n      <fieldset class=\"border border-gray-900 mb-2\">\n        <legend class=\"m-2 px-2\">Props</legend>\n        <div class=\"mb-2\">\n          <input\n            id=\"tree-expand-selected\"\n            class=\"ml-2 hover:cursor-pointer\"\n            type=\"checkbox\"\n            v-model=\"expandSelected\"\n          />\n          <label class=\"ml-1 hover:cursor-pointer\" for=\"tree-expand-selected\">\n            expandSelected\n          </label>\n        </div>\n        <div class=\"mb-2\">\n          <input\n            id=\"tree-inverted\"\n            class=\"ml-2 hover:cursor-pointer\"\n            type=\"checkbox\"\n            v-model=\"inverted\"\n          />\n          <label class=\"ml-1 hover:cursor-pointer\" for=\"tree-inverted\">\n            inverted\n          </label>\n        </div>\n        <div class=\"mb-2\">\n          <input\n            id=\"tree-emit-children\"\n            class=\"ml-2 hover:cursor-pointer\"\n            type=\"checkbox\"\n            v-model=\"emitSelectedChildren\"\n          />\n          <label class=\"ml-1 hover:cursor-pointer\" for=\"tree-inverted\">\n            emitSelectedChildren\n          </label>\n        </div>\n      </fieldset>\n\n      <div class=\"mb-2\">\n        <button\n          @click=\"clearSelection\"\n          class=\"bg-orange-500 hover:bg-white py-2 px-4 rounded border border-gray-900\"\n        >\n          Clear selection\n        </button>\n      </div>\n      <hr />\n      <div class=\"my-2\">\n        Number off selected nodes: {{ selectedNodesNames.length }}\n      </div>\n      <div>\n        <h3 class=\"font-bold\">Selected nodes:</h3>\n        <ul>\n          <li v-for=\"selectedNodeName in selectedNodesNames\">\n            {{ selectedNodeName }}\n            <button\n              @click=\"deselect(selectedNodeName)\"\n              class=\"bg-gray-400 hover:bg-gray-600 text-white py-0 px-1 mx-1 rounded\"\n            >\n              x\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n",
  "/table/EMX2.story.vue": "<script setup lang=\"ts\">\nimport type { ITableSettings, Resp, Schema } from \"~/types/types\";\n\nconst tableSettings = ref<ITableSettings>({\n  page: 1,\n  pageSize: 10,\n  orderby: { column: \"\", direction: \"ASC\" },\n  search: \"\",\n});\n\nconst { data } = await useFetch<Resp<Schema>>(\"/graphql\", {\n  key: \"databases\",\n  method: \"POST\",\n  body: { query: `{ _schemas { id,label,description } }` },\n});\n\nconst databases = computed(\n  () =>\n    data.value?.data?._schemas.sort((a, b) => a.label.localeCompare(b.label)) ??\n    []\n);\n\nconst schemaId = ref(\n  databases.value.find((d) => d.label === \"pet store\" || d.id === \"catalogue\")\n    ?.id || \"\"\n);\n\nconst schemaOptions = computed(() =>\n  databases.value.map((schema) => schema.id)\n);\n\nconst {\n  data: metadata,\n  pending: metadataPending,\n  error: metadataError,\n  refresh: refetchMetadata,\n} = await useLazyAsyncData(\"my meta data\", () => fetchMetadata(schemaId.value));\n\nconst tableId = ref(\"\");\n\nif (metadata.value) {\n  tableId.value = metadata.value.tables[0].id;\n}\n\nconst tableOptions = computed(() => {\n  if (metadata.value) {\n    return metadata.value.tables.map((table) => table.id);\n  } else {\n    return [];\n  }\n});\n\nconst {\n  data: tableData,\n  pending,\n  error,\n  refresh: refetchTableData,\n} = await useLazyAsyncData(\"my data\", () =>\n  fetchTableData(schemaId.value, tableId.value)\n);\n\nwatch(schemaId, async () => {\n  refetchMetadata().then(() => {\n    if (metadata.value) {\n      tableId.value = metadata.value.tables[0].id;\n      refetchTableData();\n    }\n  });\n});\n\nwatch(tableId, async () => {\n  refetchTableData();\n});\n\nconst tableColumns = computed(() => {\n  return (\n    metadata.value?.tables\n      .find((t) => t.id === tableId.value)\n      ?.columns.filter((column) => !column.id.startsWith(\"mg\")) ?? []\n  );\n});\n\nconst dataRows = computed(() => {\n  if (!tableData.value) return [];\n\n  return tableData.value.rows.map((row) => {\n    return Object.fromEntries(\n      Object.entries(row).filter(([key]) => !key.startsWith(\"mg\"))\n    );\n  });\n});\n\nconst numberOfRows = computed(() => tableData?.value?.count ?? 0);\n</script>\n\n<template>\n  <div class=\"mt-4 mb-16\">\n    <h3 class=\"text-heading-lg\">Params</h3>\n    <div class=\"m-2\">\n      <label for=\"schema-id-input\">schema id: </label>\n      <select id=\"schema-id-input\" v-model=\"schemaId\">\n        <option v-for=\"option in schemaOptions\" :value=\"option\">\n          {{ option }}\n        </option>\n      </select>\n    </div>\n    <div class=\"m-2\">\n      <label for=\"table-id-select\">table id: </label>\n      <select id=\"table-id-select\" v-model=\"tableId\">\n        <option v-for=\"option in tableOptions\" :value=\"option\">\n          {{ option }}\n        </option>\n      </select>\n    </div>\n  </div>\n\n  <div>\n    <TableEMX2\n      :table-id=\"tableId\"\n      :columns=\"tableColumns\"\n      :rows=\"dataRows\"\n      :count=\"numberOfRows\"\n      @update:settings=\"(value: ITableSettings) => tableSettings = value\"\n      :settings=\"tableSettings\"\n    />\n  </div>\n</template>\nd\n",
  "/viz/ChartLegend.story.vue": "<script setup lang=\"ts\">\nconst legendItemHovered = ref<string>();\nconst legendItemClicked = ref<string[]>();\nconst legendItemClickedSingle = ref<string[]>([]);\n\nconst legendData = {\n  \"Group A\": \"#f6eff7\",\n  \"Group B\": \"#bdc9e1\",\n  \"Group C\": \"#67a9cf\",\n  \"Group D\": \"#02818a\",\n};\n</script>\n\n<template>\n  <div class=\"[&>p]:mb-3 [&>p]:mt-2\">\n    <h3 class=\"text-heading-2xl\">Legend Item Marker Component</h3>\n    <p>\n      The legend component has one child component:\n      <code>ChartLegendMarker</code>. This component allows you to change the\n      symbol for each legend item. You can either render the markers as a square\n      or cirle. This is useful for visually linking chart types with the\n      legends. For example, if you are creating a scatter plot, it is better to\n      render the legend items using the circle item rather than the square. By\n      default, the marker type is a circle. The color (i.e., fill) of the marker\n      can be set by using the <code>fill</code> parameter.\n    </p>\n    <pre class=\"block bg-gray-200 p-1 mb-3 whitespace-pre-line\">\n      {{  `<ChartLegendMarker marker-type=\"circle\" fill=\"orange\"/>` }}\n      {{  `<ChartLegendMarker marker-type=\"square\" fill=\"orange\"/>` }}\n    </pre>\n    <div class=\"flex flex-row gap-1 p-1 my-4\">\n      <ChartLegendMarker marker-type=\"circle\" fill=\"orange\" />\n      <ChartLegendMarker marker-type=\"square\" fill=\"orange\" />\n    </div>\n    <h3 class=\"text-heading-2xl\">The Legend Component</h3>\n    <p>\n      The purpose of the <code>ChartLegend</code> component is to provide\n      context for charts that display grouped data. The color palette in the\n      chart and the legend should be the same. The input data is an object\n      containing one or more key-value pairs. The key must by the group name and\n      the value is the color. For example:\n    </p>\n    <pre class=\"block bg-gray-200 p-1 mb-3 whitespace-normal\">\n      {{ legendData }}\n    </pre>\n    <p>This produces the following legend.</p>\n    <ChartLegend\n      legend-id=\"default-legend\"\n      :data=\"legendData\"\n      :stack-legend=\"false\"\n    />\n    <p>\n      The legend can also be stacked using <code>:stack-legend=\"true\"</code>\n    </p>\n    <pre class=\"block bg-gray-200 p-1 mb-3 whitespace-normal\">\n      {{ `<ChartLegend legend-id=\"default-legend\" :data=\"legendData\" :stack-legend=\"true\"/>` }}\n    </pre>\n    <ChartLegend\n      legend-id=\"default-legend\"\n      :data=\"legendData\"\n      :stack-legend=\"true\"\n    />\n    <h3 class=\"text-heading-2xl mt-2\">Legend Interactivity</h3>\n    <p>\n      Interactive features are also available on the legend component. These\n      features can be used to control a chart by extracting the value of a\n      legend item (i.e., the label). You can enable/disable hovering and clicks\n      in a legend.\n    </p>\n    <p>\n      In the legend below, hover over the labels. Hovering emits the label or\n      value of the item. This is useful if you would like to emphasize content\n      in a chart (change the color, increase the size, etc.) or if you would\n      like to perform some other action using the data. Capturing the emitted\n      data is possible by using the following events:\n      <code>@legend-item-mouseover</code> or <code>@legend-item-mouseout</code>\n    </p>\n    <div class=\"grid grid-cols-2\">\n      <div>\n        <ChartLegend\n          legend-id=\"interactive-legend-hovering\"\n          :data=\"legendData\"\n          :stack-legend=\"true\"\n          :enable-hovering=\"true\"\n          @legend-item-mouseover=\"legendItemHovered = $event\"\n        />\n      </div>\n      <div class=\"bg-gray-200\">\n        <pre class=\"block bg-gray-200 p-1 mb-3 whitespace-normal\">\n          You hovered over: {{ legendItemHovered }}\n        </pre>\n      </div>\n    </div>\n    <p>\n      In addition to hovering, you can also enable clicks using the\n      <code>@legend-item-clicked</code> option.\n    </p>\n    <div class=\"grid grid-cols-2\">\n      <div class>\n        <ChartLegend\n          legend-id=\"interactive-legend-clicks\"\n          :data=\"legendData\"\n          :stack-legend=\"true\"\n          :enable-clicks=\"true\"\n          @legend-item-clicked=\"legendItemClicked = $event\"\n        />\n      </div>\n      <div class=\"bg-gray-200\">\n        <pre class=\"block bg-gray-200 p-1 mb-3 whitespace-normal\">\n          You clicked: {{ legendItemClicked }}\n        </pre>\n      </div>\n    </div>\n    <p>\n      By default, clicks allow multiple selections (generated by checkboxes). If\n      you want to allow a single selection, then set the option\n      <code>enableMultiSelect=\"false\"</code>. This will render the legend items\n      as a radio group allowing you to emit one item at a time. By default, this\n      method applies styles to items that aren't selected.\n    </p>\n    <div class=\"grid grid-cols-2\">\n      <div class>\n        <ChartLegend\n          legend-id=\"interactive-legend-clicks-single\"\n          :data=\"legendData\"\n          :stack-legend=\"true\"\n          :enable-clicks=\"true\"\n          :enable-multi-select=\"false\"\n          @legend-item-clicked=\"legendItemClickedSingle = $event\"\n        />\n      </div>\n      <div class=\"bg-gray-200\">\n        <pre class=\"block bg-gray-200 p-1 mb-3 whitespace-normal\">\n          You clicked: {{ legendItemClickedSingle }}\n        </pre>\n      </div>\n    </div>\n  </div>\n</template>\n"
}