/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "java"
    id "com.github.node-gradle.node" version "7.0.1"
}

def isCI = System.getenv('CI') ? true : false

def nodeSpec = {
    version = '20.11.0'
    yarnVersion = '1.22.19'
    npmVersion = "9.5.1"
}

node {
    with nodeSpec
    download = !isCI
}

subprojects { subproject ->
    apply plugin: 'com.github.node-gradle.node'

    node {
        with nodeSpec
        download = false
    }

    task cleanJavascript() {
        delete 'dist'
        delete 'showCase'
    }
    clean.dependsOn cleanJavascript

    task format(type: YarnTask, dependsOn: parent.yarn_install) {
        if (!isCI) {
            args = ['run', 'format']
            inputs.files fileTree(projectDir).matching {
                // Exclude 'build', 'dist', and 'showCase' directories
                exclude "build"
                exclude "dist"
                exclude "showCase"
                exclude "node_modules"
            }
            outputs.files fileTree(projectDir).matching {
                exclude "build"
                exclude "dist"
                exclude "node_modules"
                exclude "showCase"
            }
        } else {
            args = ['run', 'checkFormat']
            inputs.files fileTree(projectDir).matching {
                // Exclude 'build', 'dist', and 'showCase' directories
                exclude "build"
                exclude "dist"
                exclude "showCase"
                exclude "node_modules"
            }
        }
    }

    task buildJavascript(type: YarnTask, dependsOn: format) {
        environment = ["NODE_OPTIONS": "--max-old-space-size=4096"]
        def packageJson = file("package.json").text
        if(packageJson.contains('"meta-data-utils": "*"')) {
            dependsOn ":apps:meta-data-utils:buildJavascript";
        }
        if(packageJson.contains('"molgenis-components": "*"')) {
            dependsOn ":apps:molgenis-components:buildJavascript";
        }
        if(packageJson.contains('"molgenis-viz": "*"')) {
            dependsOn ":apps:molgenis-viz:buildJavascript";
        }

        if (project.name == 'molgenis-components' || project.name == 'molgenis-viz') {
            args = ['run', 'build-showcase']
            doLast {
                copy {
                    from "showCase"
                    into "${parent.buildDir}/generated/main/resources/public_html/apps/" + project.name
                }
            }
        } else {
            args = ['run', 'build']
            doLast {
                copy {
                    from "dist"
                    into "${parent.buildDir}/generated/main/resources/public_html/apps/" + project.name
                }
            }
        }
        inputs.files fileTree(projectDir).matching {
            // Exclude 'build', 'dist', and 'showCase' directories
            exclude "build"
            exclude "dist"
            exclude "node_modules"
            exclude "showCase"
        }
        outputs.dir(file("dist"))
        outputs.dir(file("showCase"))
    }

    task testJavaScript(type: YarnTask, dependsOn: buildJavascript) {
        args = ['run', 'test-ci']
        inputs.files fileTree(projectDir).matching {
            // Exclude 'build', 'dist', and 'showCase' directories
            exclude "build"
            exclude "dist"
            exclude "showCase"
            exclude "node_modules"
        }
    }
    test.dependsOn testJavaScript
}

processResources.dependsOn subprojects.tasks.buildJavascript
sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated/main/resources"
        }
    }
}
