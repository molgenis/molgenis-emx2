/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "java"
    id "com.github.node-gradle.node" version "7.1.0"
}

java {
    targetCompatibility = rootProject.ext.javaVersion
    sourceCompatibility = rootProject.ext.javaVersion
}

def isCI = System.getenv('CI') ? true : false


node {
    version = '22.17.0'
    npmVersion = "10.9.2"
    download = !isCI
}

npm_install {
    args = ['--workspaces']
    inputs.file('package.json')
    inputs.file('package-lock.json')
    outputs.dir "dist"
}

def excludePatterns = [
        "node_modules/**", "**/node_modules/**", "**/dist/**", "**/.git/**", "**/.gradle/**", "**/build/**", "**/.nuxt/**",
        "**/public/_nuxt-styles/**", "**/.output/**", "**/showCase/**"
]

tasks.register('npm_build', NpmTask) {
    dependsOn npm_install
    args = ['run', 'build', '--workspaces']
    // Inputs = all frontend sources
    inputs.files(fileTree(".") {
        include("*")
        exclude(excludePatterns)
    })
    inputs.file("package.json")
    inputs.file("package-lock.json")

    // Outputs = dist directory
    outputs.files(fileTree(".") {
        include("*/dist/**")
    })
}

// Util task to clean up all apps files created during build
tasks.register("cleanApps", Delete) {
    // clean up the resources directory
    delete file("${project.layout.buildDirectory}")
    // clean up all dist directories
    file(".").eachDir { dir ->
        def distDir = new File(dir, "dist")
        if (distDir.exists()) {
            delete distDir
        }
    }
}

// Custom task to collect all dist folders into the resources directory
// Need because gradle cannot properly detect dynamic folders created by npm workspaces
abstract class CollectDistTask extends DefaultTask {
    @TaskAction
    void collect() {
        File targetDir = project.layout.buildDirectory
                .dir("generated/resources/public_html/apps")
                .get()
                .asFile

        project.copy { spec ->
            project.file(".").eachDir { dir ->
                def showCaseDir = new File(dir, "showCase")
                def distDir = new File(dir, "dist")
                if (showCaseDir.exists()) {
                    spec.from(showCaseDir) {
                        into(dir.name)
                    }
                }
                else if (distDir.exists()) {
                    spec.from(distDir) {
                        into(dir.name)
                    }
                }
            }
            spec.into(targetDir)
        }

        println "âœ… Collected dist folders into $targetDir"
    }
}

tasks.register("collectDist", CollectDistTask) {
    dependsOn("npm_build")
}

tasks.register('appsFormat', NpmTask) {
    dependsOn npm_build
    args = ['run', 'format', '--workspaces']
    // Inputs = all frontend sources
    inputs.files(fileTree(".") {
        include("**/*")
        exclude(excludePatterns)
    })
    outputs.files(fileTree(".") {
        include("**/*")
        exclude(excludePatterns)
    })
}

tasks.register('lint', NpmTask) {
    dependsOn appsFormat
    args = ['run', 'lint', '--workspace=tailwind-components']
    // Inputs = all frontend sources
    inputs.files(fileTree(".") {
        include("**/*")
        exclude(excludePatterns)
    })
    outputs.files(fileTree(".") {
        include("**/*")
        exclude(excludePatterns)
    })
}

sourceSets {
    main {
        resources {
            srcDir "${project.layout.buildDirectory}/generated/main/resources"
        }
    }
}

// Link the app build to the java jar
tasks.named("processResources") {

    dependsOn("collectDist")

    from(layout.buildDirectory.dir("generated/resources/public_html/apps")) {
        into("public_html/apps")
    }
}

apply plugin: 'com.github.node-gradle.node'