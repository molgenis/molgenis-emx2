/* will produce a fat jar containing all html/js dist in public_html/apps*/
plugins {
    id "java"
    id "com.github.node-gradle.node" version "7.1.0"
}

def isCI = System.getenv('CI') ? true : false

//node config
node {
    version = '22.3.0'
    npmVersion = "10.8.1"
    pnpmVersion = "10.10.0"
    download = true
}

task installJavascript(type: PnpmTask, dependsOn: pnpmSetup) {
   inputs.files(fileTree("${project.buildDir}") {
        include("**/package.json", "pnpm-lock.yaml")
    });
    outputs.files(fileTree("${project.projectDir}") {
        include("pnpm-lock.yaml") // Single lock file in the root
    })
    args = ['install']
}

def excludeDef = {
    // Exclude 'build', 'dist', and 'showCase' directories from inputs
    exclude "**/.gradle"
    exclude "**/dist"
    exclude "**/node_modules"
    exclude "**/showCase"
    exclude "**/.output"
    exclude "**/.fingerprint.js"
    exclude "**/.nuxt"
    exclude "**/public/_nuxt-styles"
    exclude "**/build"
    exclude "**/.nx"
}

clean.doLast {
    def nxCacheDir = file("${projectDir}/.nx")
    if (nxCacheDir.exists()) {
        nxCacheDir.deleteDir()
        println ".nx cache folder deleted"
    } else {
        println ".nx folder not found"
    }
}

//run using pnpm after pnpm install
task buildJavascript(type: PnpmTask, dependsOn: installJavascript) {
    //delegate heavy lifting to nx
    args = ["nx", "run-many", "--target=build", "--all"]
    inputs.files fileTree(projectDir).matching {
        with excludeDef
    }
    //copy build results when done
    doLast {
        file(projectDir).eachDir { folder ->
            def packageJsonFile = file("${folder}/package.json")
            //only files with apps
            if (packageJsonFile.exists()) {
                def fromDir = packageJsonFile.text.contains("\"name\": \"ui\"") ? "${folder}/.output/public" : "${folder}/dist"
                def toDir = "${project.buildDir}/generated/main/resources/public_html/apps/${folder.name}"
                copy {
                    from fromDir
                    into toDir
                }
            }
        }
    }

    outputs.files fileTree(dir: "${project.buildDir}/generated/main/resources/public_html/apps/")
}

task format(type: PnpmTask) {
    inputs.files fileTree(projectDir).matching {
        with excludeDef
    }
    if (!isCI) {
        args = ["nx", "run-many", "--target=format", "--all"]
        outputs.files fileTree(projectDir).matching {
            with excludeDef
        }
    } else {
        args = ["nx", "run-many", "--target=checkFormat", "--all"]
    }
}

task buildShowcase(type: PnpmTask, dependsOn: buildJavascript) {
    inputs.files fileTree(projectDir).matching {
        with excludeDef
    }
    outputs.files(fileTree("${project.buildDir}") {
        include("**/.output", "**/showCase")
    });
    args = ['nx', 'run-many', '--target=build-showcase', '--all']
    //copy build results when done
    doLast {
        file("${project.projectDir}").eachDir { folder ->
            def packageJsonFile = file("${folder}/package.json")
            //only files with apps
            if (packageJsonFile.exists()) {
                def fromDir = packageJsonFile.text.contains("\"name\": \"tailwind-components\"") ? "${folder}/.output/public" : "${folder}/showCase"
                def toDir = "${project.buildDir}/generated/main/resources/public_html/apps/${folder.name}"
                copy {
                    from fromDir
                    into toDir
                }
            }
        }
    }
}

task lint(type: PnpmTask, dependsOn: buildJavascript) {
    inputs.files fileTree(projectDir).matching {
        with excludeDef
    }
    args = ["nx", "run-many", "--target=lint", "--all"]
}

task testJavaScript(type: PnpmTask, dependsOn: buildJavascript) {
    inputs.files fileTree(projectDir).matching {
        with excludeDef
    }
    //nx takes care of build if needed
    args = ["nx", "run-many", "--target=test-ci", "--all"]
}
test.dependsOn testJavaScript

//depends on build showcase which depends on buildJavascript
processResources.dependsOn buildShowcase
sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated/main/resources"
        }
    }
}
