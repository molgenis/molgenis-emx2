/* will produce a fat jar containing all html/js dist in public_html/apps*/
plugins {
    id "java"
    id "com.github.node-gradle.node" version "7.1.0"
}

def isCI = System.getenv('CI') ? true : false

//node config
node {
    version = '22.3.0'
    npmVersion = "10.8.1"
    pnpmVersion = '10.10.0'
    download = !isCI
}

task installJavascriptDependencies(type: PnpmTask) {
    args = ['install']
}

//run using pnpm after pnpm install
task buildJavascript(type: PnpmTask, dependsOn: installJavascriptDependencies) {
    //delegate heavy lifting to nx
    args = ['run', 'build']
    //copy build results when done
    doLast {
        file("${project.projectDir}").eachDir { folder ->
            def packageJsonFile = file("${folder}/package.json")
            //only files with apps
            if (packageJsonFile.exists()) {
                def fromDir = packageJsonFile.text.contains("\"name\": \"ui\"") ? "${folder}/.output/public" : "${folder}/dist"
                def toDir = "${project.buildDir}/generated/main/resources/public_html/apps/${folder.name}"
                copy {
                    from fromDir
                    into toDir
                }
            }
        }
    }
}

task format(type: PnpmTask) {
    if (!isCI) {
        args = ['run', 'format']
    } else {
        args = ['run', 'checkFormat']
    }
}

task buildShowcase(type: PnpmTask, dependsOn: buildJavascript) {
    args = ['run', 'build-showcase']
    //copy build results when done
    doLast {
        file("${project.projectDir}").eachDir { folder ->
            def packageJsonFile = file("${folder}/package.json")
            //only files with apps
            if (packageJsonFile.exists()) {
                def fromDir = packageJsonFile.text.contains("\"name\": \"tailwind-components\"") ? "${folder}/.output/public" : "${folder}/showCase"
                def toDir = "${project.buildDir}/generated/main/resources/public_html/apps/${folder.name}"
                copy {
                    from fromDir
                    into toDir
                }
            }
        }
    }
}

task lint(type: PnpmTask, dependsOn: buildJavascript) {
    args = ['run', 'lint']
}

task testJavaScript(type: PnpmTask, dependsOn: buildJavascript) {
    args = ['run', 'test']
}
test.dependsOn testJavaScript

//depends on build showcase which depends on buildJavascript
processResources.dependsOn buildShowcase
sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated/main/resources"
        }
    }
}
