/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "java"
    id "com.github.node-gradle.node" version "7.1.0"
}

java {
    targetCompatibility = rootProject.ext.javaVersion
    sourceCompatibility = rootProject.ext.javaVersion
}

def isCI = System.getenv('CI') ? true : false


node {
    version = '22.17.0'
    npmVersion = "10.9.2"
    download = !isCI
}

npm_install {
    args = ['--workspaces']
    inputs.file('package.json')
    inputs.file('package-lock.json')
    outputs.dir "dist"
}

def excludePatterns = [
        "node_modules/**", "**/node_modules/**", "**/dist/**", "**/.git/**", "**/.gradle/**", "**/build/**", "**/.nuxt/**",
        "**/public/_nuxt-styles/**", "**/.output/**", "**/showCase/**"
]

tasks.register('npm_build', NpmTask) {
    dependsOn npm_install
    args = ['run', 'build', '--workspaces']
    // Inputs = all frontend sources
    inputs.files(fileTree(".") {
        include("*")
        exclude(excludePatterns)
    })
    inputs.file("package.json")
    inputs.file("package-lock.json")

    // Outputs = dist directory
    outputs.files(fileTree(".") {
        include("*/dist/**")
    })
}

tasks.register("collectDist", Copy) {
    dependsOn npm_build
    // Look for all dist folders inside apps/*
    file(".").eachDir { dir ->
        def distDir = new File(dir, "dist")
        if (distDir.exists()) {
            from(distDir) {
                // put it under the app name
                into(dir.name)
            }
        }
    }

    // Final output folder
    into("${buildDir}/generated/main/resources/public_html/apps")

    inputs.files(fileTree(".") {
        include("*/dist/**")
    })
    outputs.dir("${buildDir}/generated/main/resources/public_html/apps")
}

tasks.register('appsFormat', NpmTask) {
    dependsOn npm_build
    args = ['run', 'format', '--workspaces']
    // Inputs = all frontend sources
    inputs.files(fileTree(".") {
        include("**/*")
        exclude(excludePatterns)
    })
    outputs.files(fileTree(".") {
        include("**/*")
        exclude(excludePatterns)
    })
}

tasks.register('lint', NpmTask) {
    dependsOn appsFormat
    args = ['run', 'lint', '--workspace=tailwind-components']
    // Inputs = all frontend sources
    inputs.files(fileTree(".") {
        include("**/*")
        exclude(excludePatterns)
    })
    outputs.files(fileTree(".") {
        include("**/*")
        exclude(excludePatterns)
    })
}
// ensure dist exists before processResources runs
tasks.named("processResources") {
    dependsOn("collectDist")
}

sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated/main/resources"
        }
    }
}
//
tasks.jar.dependsOn collectDist
tasks.processResources.dependsOn collectDist

apply plugin: 'com.github.node-gradle.node'
