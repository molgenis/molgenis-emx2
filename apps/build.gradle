/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "java"
    id "com.github.node-gradle.node" version "7.0.1"
}

def isCI = System.getenv('CI') ? true : false

def nodeSpec = {
    version = '20.11.0'
    yarnVersion = '1.22.19'
    npmVersion = "9.5.1"
    download = !isCI
}

def excludeDef = {
    // Exclude 'build', 'dist', and 'showCase' directories from inputs
    exclude ".gradle"
    exclude "dist"
    exclude "node_modules"
    exclude "showCase"
    exclude ".output"
    exclude ".fingerprint.js"
    exclude ".nuxt"
    exclude "public/_nuxt-styles"
    exclude "build"
}

node {
    with nodeSpec
}

subprojects { subproject ->
    apply plugin: 'com.github.node-gradle.node'

    node {
        with nodeSpec
    }

    task format(type: YarnTask, dependsOn: parent.yarn_install) {
        if (!isCI) {
            args = ['run', 'format']
            inputs.files fileTree(projectDir).matching {
                with excludeDef
            }
            outputs.files fileTree(projectDir).matching {
                with excludeDef
            }
        } else {
            args = ['run', 'checkFormat']
            inputs.files fileTree(projectDir).matching {
                with excludeDef
            }
        }
    }

    def packageJson = file("package.json").text

    task buildJavascript(type: YarnTask, dependsOn: format) {
        environment = ["NODE_OPTIONS": "--max-old-space-size=4096"]

        //automatically get the internal dependencies
        (packageJson =~ /"([^"]+)":\s*"\*"/).each { match ->
            dependsOn ":apps:${match[1]}:buildJavascript";
        }
        //run the build
        args = ['run', 'build']
        doLast {
            copy {
                from "dist"
                into "${parent.buildDir}/generated/main/resources/public_html/apps/" + project.name
            }
        }
        outputs.dir "dist"
//        for caching
        inputs.files fileTree(projectDir).matching {
            with excludeDef
        }
    }
    parent.tasks.processResources.dependsOn buildJavascript

    task testJavaScript(type: YarnTask, dependsOn: buildJavascript) {
        if (packageJson.contains("test-ci")) {
            args = ['run', 'test-ci']
            inputs.files fileTree(projectDir).matching {
                with excludeDef
            }
        }
    }
    test.dependsOn testJavaScript

    if (packageJson.contains("build-showcase")) {
        task buildShowcase(type: YarnTask, dependsOn: buildJavascript) {
            environment = ["NODE_OPTIONS": "--max-old-space-size=4096"]
            args = ['run', 'build-showcase']
            doLast {
                copy {
                    from "showCase"
                    into "${parent.buildDir}/generated/main/resources/public_html/apps/" + project.name
                }
            }
            outputs.dir "showCase"
            //for caching
            inputs.files fileTree(projectDir).matching {
                with excludeDef
            }
        }
        parent.tasks.processResources.dependsOn buildShowcase
    }
}

sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated/main/resources"
        }
    }
}
