/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "base"
    id "com.github.node-gradle.node" version "3.3.0"
}

def nodeSpec = {
    version = '16.16.0'
    yarnVersion = '1.22.19'
    npmVersion = "8.17.0"
    download = true
}

node {
    with nodeSpec
}

task buildComponentsLib(type: YarnTask, dependsOn: yarn_install) {

    inputs.file('molgenis-components/package.json')
    inputs.files(fileTree('molgenis-components/src'))
    inputs.files(fileTree('molgenis-components/public'))
    inputs.files(fileTree('molgenis-components/lib'))
    inputs.file('molgenis-components/vite.config.js')
    inputs.file('molgenis-components/docs-plugin.js')
    outputs.dir('molgenis-components/dist')
    outputs.dir('molgenis-components/gen-docs')
    outputs.dir('molgenis-components/showCase')

    outputs.cacheIf { true }

    setWorkingDir(file('./molgenis-components'))

    args = ['run', 'build']

    delete "${buildDir}/resources/main/public_html/apps/molgenis-components"

}

subprojects {
    apply plugin: "com.github.node-gradle.node"

    yarnSetup.dependsOn parent.yarnSetup
    npmSetup.dependsOn parent.npmSetup
    nodeSetup.dependsOn parent.nodeSetup

    task build(type: YarnTask, dependsOn: buildComponentsLib) {
        node { with nodeSpec }

        // set input out out put for each app type
        if (project.name != 'molgenis-components' && project.name == 'nuxt-ssr') {
            inputs.file('package.json')
            inputs.files(fileTree('assets'))
            inputs.files(fileTree('components'))
            inputs.files(fileTree('middleware'))
            inputs.files(fileTree('layouts'))
            inputs.files(fileTree('pages'))
            inputs.files(fileTree('static'))
            inputs.files(fileTree('store'))
            inputs.file('nuxt.config.js')
            outputs.dir('.nuxt')
        } else {
            inputs.file('package.json')
            inputs.files(fileTree('src'))
            inputs.files(fileTree('public'))
            inputs.files(fileTree('assets'))
            inputs.file('vite.config.js')
            inputs.file('index.html')
            outputs.dir('dist')
        }

        outputs.cacheIf { true }

        args = ['run', 'build']

        delete "${project.parent.buildDir}/resources/main/public_html/apps/${project.name}"
    }

    if (project.name == 'molgenis-components') {
        task buildComponentsShowcase(type: YarnTask, dependsOn: build) {
            node { with nodeSpec }
            if (project.name == 'molgenis-components') {
                inputs.file('package.json')
                inputs.files(fileTree('src'))
                inputs.files(fileTree('public'))
                inputs.files(fileTree('lib'))
                inputs.file('vite.config.js')
                outputs.dir('showCase')
                outputs.cacheIf { true }
                args = ['run', 'build-showcase']
            }
        }
    }

    task test(type: YarnTask) {
        if (project.name == 'molgenis-components') {
            args = ['run', 'test-ci']
        }
    }

    task copyDistFiles(type: Copy) {
        if (project.name == 'molgenis-components') {
            dependsOn buildComponentsShowcase
        } else {
            dependsOn build
        }
        if (project.name == 'molgenis-components') {
            from "showCase"
            inputs.dir("showCase")
        } else {
            from "dist"
            inputs.dir("dist")
        }

        into "${project.parent.buildDir}/resources/main/public_html/apps/${project.name}"
        outputs.dir("${project.parent.buildDir}/resources/main/public_html/apps/${project.name}")
        outputs.cacheIf { true }
    }

    clean.doLast {
        project.delete(files("dist"))
        project.delete(files("build"))
        project.delete(files("node_modules"))
        project.delete(files(".nuxt"))
        project.delete(files("showCase"))
        project.delete(files("../node_modules"))
    }

}

/* convert build files into one apps.jar that we can use as a dependency in the java part */
task createJar(type: Zip, dependsOn: subprojects.copyDistFiles) {
    archiveBaseName = 'molgenis-emx2-apps'
    archiveExtension = 'jar'
    destinationDirectory = file("${buildDir}/build/libs")
    from('build/resources/main')
}

configurations {
    appResources
}
configurations.default.extendsFrom(configurations.appResources)

/* expose as artifact that can be used as dependency by other modules*/
artifacts {
    appResources(createJar.getArchiveFile()) {
        builtBy createJar
        type "jar"
    }
}


