/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "base"
    id "com.github.node-gradle.node" version "3.6.0"
}

def nodeSpec = {
    version = '19.9.0'
    yarnVersion = '1.22.19'
    npmVersion = "9.5.1"
    download = true
}

node {
    with nodeSpec
}

task format(type: YarnTask, dependsOn: yarn_install) {
    args = ['run', 'nx', 'format:write']
}

task buildJavascript(type: YarnTask, dependsOn: format) {
    args = ['run', 'nx', 'run-many', '--target=build,build-showcase','--parallel=4']
}
build.dependsOn buildJavascript

task cleanJavascript(type: YarnTask, dependsOn: yarn_install) {
    args = ['run', 'nx', 'reset']
}
clean.dependsOn cleanJavascript

subprojects {
    task copyDistFiles(type: Copy) {
        dependsOn parent.build
        if (project.name == 'molgenis-components' || project.name == 'molgenis-viz') {
            from "showCase"
            inputs.dir("showCase")
        } else {
            from "dist"
            inputs.dir("dist")
        }
        into "${project.parent.buildDir}/resources/main/public_html/apps/${project.name}"
        outputs.dir("${project.parent.buildDir}/resources/main/public_html/apps/${project.name}")
        outputs.cacheIf { true }
    }

    clean.doLast {
        project.delete(files("dist"))
        project.delete(files("build"))
        project.delete(files("node_modules"))
        project.delete(files(".nuxt"))
        project.delete(files(".output"))
        project.delete(files("showCase"))
    }
}

/* convert build files into one apps.jar that we can use as a dependency in the java part */
task createJar(type: Zip, dependsOn: subprojects.copyDistFiles) {
    archiveBaseName = 'molgenis-emx2-apps'
    archiveExtension = 'jar'
    destinationDirectory = file("${buildDir}/build/libs")
    from('build/resources/main')
}

configurations {
    appResources
}
configurations.default.extendsFrom(configurations.appResources)

/* expose as artifact that can be used as dependency by other modules*/
artifacts {
    appResources(createJar.getArchiveFile()) {
        builtBy createJar
        type "jar"
    }
}


