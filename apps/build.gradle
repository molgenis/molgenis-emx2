/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "base"
    id "com.github.node-gradle.node" version "3.6.0"
}

def nodeSpec = {
    version = '19.9.0'
    yarnVersion = '1.22.19'
    npmVersion = "9.5.1"
    download = true
}

node {
    with nodeSpec
}

task format(type: YarnTask, dependsOn: yarn_install) {
    args = ['run', 'nx', 'format:write']
}

task buildJavascript(type: YarnTask, dependsOn: format) {
    args = ['run', 'nx', 'run-many', '--target=build,build-showcase','--parallel=4']
}

task cleanJavascript(type: YarnTask, dependsOn: yarn_install) {
    args = ['run', 'nx', 'reset']
}
clean.dependsOn cleanJavascript

/* copy the javascript files to the build folder */
task copyDistFiles(type: Copy, dependsOn: buildJavascript) {
   file("${project.projectDir}").eachDir { dir ->
       if (new File(dir.name + "/showCase").exists()) {
           println dir.name + "/showCase"
           inputs.dir(dir.name + "/showCase")
           copy {
               from dir.name + "/showCase"
               into "${project.buildDir}/resources/main/public_html/apps/" + dir.name
           }
       } else if(new File(dir.name + "/dist").exists()) {
           println dir.name + "/dist"
           inputs.dir(dir.name + "/showcase")
           copy {
               from dir.name + "/dist"
               into "${project.buildDir}/resources/main/public_html/apps/" + dir.name
           }
       }
       outputs.dir("${project.buildDir}/resources/main/public_html/apps/"+dir.name)
    }
}


/* convert build files into one apps.jar that we can use as a dependency in the java part */
task createJar(type: Zip, dependsOn: copyDistFiles) {
    archiveBaseName = 'molgenis-emx2-apps'
    archiveExtension = 'jar'
    destinationDirectory = file("${buildDir}/build/libs")
    from('build/resources/main')
}

configurations {
    appResources
}
configurations.default.extendsFrom(configurations.appResources)

/* expose as artifact that can be used as dependency by other modules*/
artifacts {
    appResources(createJar.getArchiveFile()) {
        builtBy createJar
        type "jar"
    }
}


