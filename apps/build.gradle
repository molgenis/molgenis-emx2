/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "base"
    id "com.github.node-gradle.node" version "3.5.1"
}

def nodeSpec = {
    version = '18.14.2'
    yarnVersion = '1.22.19'
    npmVersion = "9.5.1"
    download = true
}

node {
    with nodeSpec
}

subprojects {
    apply plugin: "com.github.node-gradle.node"

    //subprojects will reuse the yarn installed in parent task
    node {
        with nodeSpec
    }

    //disable yarn_install, only parent should run install in yarn workspaces
    yarn_install.enabled = false;
    yarnSetup.dependsOn parent.yarnSetup
    npmSetup.dependsOn parent.npmSetup
    nodeSetup.dependsOn parent.nodeSetup

    task format(type: YarnTask, dependsOn: parent.yarn_install) {
        args = ['run', 'format']
        if(project.name == 'nuxt3-ssr') {
            outputs.dir('components')
            outputs.dir('composables')
            outputs.dir('gql')
            outputs.dir('interfaces')
            outputs.dir('pages')
            outputs.dir('plugins')
            outputs.dir('utils')
            inputs.files(fileTree('components'))
            inputs.files(fileTree('composables'))
            inputs.files(fileTree('gql'))
            inputs.files(fileTree('interfaces'))
            inputs.files(fileTree('pages'))
            inputs.files(fileTree('plugins'))
            inputs.files(fileTree('utils'))
        } else {
            inputs.files(fileTree('src'))
            outputs.dir('src')
        }
    }

    task build(type: YarnTask, dependsOn: format) {
        // force build order: molgenis-components > ...apps
        if (project.name != 'molgenis-components') {
            dependsOn ":apps:molgenis-components:build"
        }

        // set input out out put for each app type
        if (project.name == 'molgenis-components') {
            inputs.file('package.json')
            inputs.files(fileTree('src'))
            inputs.files(fileTree('public'))
            inputs.files(fileTree('lib'))
            inputs.file('vite.config.js')
            inputs.file('docs-plugin.js')
            outputs.dir('dist')
            outputs.dir('gen-docs')
            outputs.dir('showCase')
        } else if (project.name == 'nuxt3-ssr') {
            inputs.file('package.json')
            inputs.files(fileTree('assets'))
            inputs.files(fileTree('components'))
            inputs.files(fileTree('composables'))
            inputs.files(fileTree('middleware'))
            inputs.files(fileTree('layouts'))
            inputs.files(fileTree('pages'))
            inputs.files(fileTree('static'))
            inputs.files(fileTree('store'))
            inputs.file('nuxt.config.ts')
            inputs.file('app.vue')
            inputs.file('router.options.ts')
            inputs.file('tailwind.config.ts')
            outputs.dir('.nuxt')
            outputs.dir('.output')
        } else {
            inputs.file('package.json')
            inputs.files(fileTree('src'))
            inputs.files(fileTree('public'))
            inputs.files(fileTree('assets'))
            inputs.file('vite.config.js')
            inputs.file('index.html')
            outputs.dir('dist')
        }

        outputs.cacheIf { false }

        args = ['run', 'build']

        delete "${project.parent.buildDir}/resources/main/public_html/apps/${project.name}"
    }

    if (project.name == 'molgenis-components') {
        task buildComponentsShowcase(type: YarnTask, dependsOn: build) {
            if (project.name == 'molgenis-components') {
                inputs.file('package.json')
                inputs.files(fileTree('src'))
                inputs.files(fileTree('public'))
                inputs.files(fileTree('lib'))
                inputs.file('vite.config.js')
                outputs.dir('showCase')
                outputs.cacheIf { true }
                args = ['run', 'build-showcase']
            }
        }
        task test(type: YarnTask, dependsOn: parent.yarn_install) {
            args = ['run', 'test-ci']
        }
    }

    task copyDistFiles(type: Copy) {
        if (project.name == 'molgenis-components') {
            dependsOn buildComponentsShowcase
        } else {
            dependsOn build
        }
        if (project.name == 'molgenis-components') {
            from "showCase"
            inputs.dir("showCase")
        } else {
            from "dist"
            inputs.dir("dist")
        }

        into "${project.parent.buildDir}/resources/main/public_html/apps/${project.name}"
        outputs.dir("${project.parent.buildDir}/resources/main/public_html/apps/${project.name}")
        outputs.cacheIf { true }
    }

    clean.doLast {
        project.delete(files("dist"))
        project.delete(files("build"))
        project.delete(files("node_modules"))
        project.delete(files(".nuxt"))
        project.delete(files(".output"))
        project.delete(files("showCase"))
    }

}

/* convert build files into one apps.jar that we can use as a dependency in the java part */
task createJar(type: Zip, dependsOn: subprojects.copyDistFiles) {
    archiveBaseName = 'molgenis-emx2-apps'
    archiveExtension = 'jar'
    destinationDirectory = file("${buildDir}/build/libs")
    from('build/resources/main')
}

configurations {
    appResources
}
configurations.default.extendsFrom(configurations.appResources)

/* expose as artifact that can be used as dependency by other modules*/
artifacts {
    appResources(createJar.getArchiveFile()) {
        builtBy createJar
        type "jar"
    }
}


