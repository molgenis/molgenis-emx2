/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "base"
    id "com.github.node-gradle.node" version "3.6.0"
}

def nodeSpec = {
    version = '19.9.0'
    yarnVersion = '1.22.19'
    npmVersion = "9.5.1"
    download = true
}

node {
    with nodeSpec
}

task format(type: YarnTask, dependsOn: yarn_install) {
    args = ['run', 'nx', 'format:write']
}

task checkFormat(type: YarnTask, dependsOn: yarn_install) {
    args = ['run', 'nx', 'format:check']
}

task buildJavascript(type: YarnTask, dependsOn: format) {
    environment = ["NODE_OPTIONS":"--max-old-space-size=4096"]
    args = ['run', 'nx', 'run-many', '--target=build,build-showcase',"--parallel=${Math.ceil(Runtime.runtime.availableProcessors() / 2)}",'--verbose']
    outputs.upToDateWhen { false }
}

task cleanJavascript(type: YarnTask, dependsOn: yarn_install) {
    args = ['run', 'nx', 'reset']
}
clean.dependsOn cleanJavascript

/* copy the javascript files to the build folder, nasty we have to manually set libs */
task copyDistFiles(type: Copy, dependsOn: buildJavascript) {
   file("${project.projectDir}").eachDir { dir ->
       if (dir.name == 'molgenis-components' || dir.name == 'molgenis-viz') {
           copy {
               from dir.path + "/showCase"
               into "${buildDir}/resources/main/public_html/apps/" + dir.name
           }
       } else if(dir.name != ".gradle" && dir.name != 'build' && dir.name != 'node_modules') {
           println dir.path + "/dist"
           copy {
               from dir.name + "/dist"
               into "${buildDir}/resources/main/public_html/apps/" + dir.name
           }
       }
    }
    outputs.upToDateWhen { false }
}


/* convert build files into one apps.jar that we can use as a dependency in the java part */
task createJar(type: Zip, dependsOn: copyDistFiles) {
    archiveBaseName = 'molgenis-emx2-apps'
    archiveExtension = 'jar'
    destinationDirectory = file("${buildDir}/build/libs")
    from('build/resources/main')
}
build.dependsOn createJar

configurations {
    appResources
}
configurations.default.extendsFrom(configurations.appResources)

/* expose as artifact that can be used as dependency by other modules*/
artifacts {
    appResources(createJar.getArchiveFile()) {
        builtBy createJar
        type "jar"
    }
}


