/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "java"
    id "com.github.node-gradle.node" version "7.0.1"
}

def isCI = System.getenv('CI') ? true : false

def nodeSpec = {
    version = '19.9.0'
    yarnVersion = '1.22.19'
    npmVersion = "9.5.1"
    download = !isCI
}

node {
    with nodeSpec
}

task cleanJavascript(type: YarnTask, dependsOn: yarn_install) {
    outputs.upToDateWhen { false }
    args = ['run', 'nx', 'reset']
}
clean.dependsOn cleanJavascript

task format(type: YarnTask, dependsOn: yarn_install) {
    // Include all files in the project directory (excluding 'build', 'dist', and 'showCase') as inputs
    inputs.files fileTree(projectDir).matching {
        // Exclude 'build', 'dist', and 'showCase' directories
        exclude '**/build/**'
        exclude '**/dist/**'
        exclude '**/showCase/**'
        exclude '**/node_modules/**'
    }
    outputs.files fileTree(projectDir).matching {
        // Exclude 'build', 'dist', and 'showCase' directories
        exclude '**/build/**'
        exclude '**/dist/**'
        exclude '**/showCase/**'
        exclude '**/node_modules/**'

    }
    if (!isCI) {
        args = ['run', 'nx', 'run-many','--target=format']
    } else {
        args = ['run', 'nx', 'run-many','--target=checkFormat']
    }
}

task testJavaScript(type: YarnTask, dependsOn: format) {
    // Include all files in the project directory (excluding 'build', 'dist', and 'showCase') as inputs
    inputs.files fileTree(projectDir).matching {
        // Exclude 'build', 'dist', and 'showCase' directories
        exclude '**/build/**'
        exclude '**/dist/**'
        exclude '**/showCase/**'
        exclude '**/node_modules/**'
    }
    outputs.dir(file('**/node_modules/.vitest'))
    args = ['run', 'nx', 'run-many', '--target=test-ci']
}

task buildJavascript(type: YarnTask, dependsOn: testJavaScript) {

    // Include all files in the project directory (excluding 'build', 'dist', and 'showCase') as inputs
    inputs.files fileTree(projectDir).matching {
        // Exclude 'build', 'dist', and 'showCase' directories
        exclude '**/build/**'
        exclude '**/dist/**'
        exclude '**/node_modules/**'
        exclude '**/showCase/**'
    }

    // Declare 'dist' and 'showCase' as potential output folders
    outputs.dir(file('**/dist'))
    outputs.dir(file('**/showCase'))

    environment = ["NODE_OPTIONS": "--max-old-space-size=4096"]
    args = ['run', 'nx', 'run-many', '--target=format:write,build,build-showcase', "--parallel=${Math.ceil(Runtime.runtime.availableProcessors() / 2)}", '--verbose']
    doLast {
        file("${project.projectDir}").eachDir { dir ->
            if (dir.name == 'molgenis-components' || dir.name == 'molgenis-viz') {
                copy {
                    from dir.path + "/showCase"
                    into "${buildDir}/generated/main/resources/public_html/apps/" + dir.name
                }
            } else if (dir.name != ".gradle" && dir.name != 'build' && dir.name != 'node_modules') {
                println dir.path + "/dist"
                copy {
                    from dir.name + "/dist"
                    into "${buildDir}/generated/main/resources/public_html/apps/" + dir.name
                }
            }
        }
    }
}

compileJava.dependsOn buildJavascript

sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated/main/resources"
        }
    }
}
