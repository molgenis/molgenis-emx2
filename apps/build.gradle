/* will produce a fat jar containing all html/js dist in public_html/apps*/

plugins {
    id "base"
    id "com.github.node-gradle.node" version "3.0.1"
}

node {
    version = '14.10.1'
    yarnVersion = '1.22.10'
    npmVersion = "6.14.18"
    download = true
}

subprojects {
    apply plugin: "com.github.node-gradle.node"

    //all depends on styleguide, so that needs build first
    task build(type: YarnTask, dependsOn: parent.yarn_install) {
        node {
            version = '14.10.1'
            yarnVersion = '1.22.10'
            npmVersion = "6.14.18"
            npmWorkDir = file("${parent.projectDir}/.gradle/npm")
            yarnWorkDir = file("${parent.projectDir}/.gradle/yarn")
            workDir = file("${parent.projectDir}/.gradle/nodejs")
        }

        inputs.files(fileTree('src'))
        inputs.files(fileTree('public'))
        inputs.file('package.json')
        if (project.name != 'docs') {
            inputs.files(fileTree('../styleguide/src'))
            inputs.file('vue.config.js')
            outputs.dir('dist')
        } else {
            outputs.dir('src/.vitepress/dist')
        }

        // tell gradle to apply the build cache
        outputs.cacheIf { true }

        //depend on styleguide to build first
        if (project.name != 'styleguide') {
            dependsOn ":apps:styleguide:build"
        }

        //first install the workspace
        args = ['run', 'build']

        //remove the target folder with copy of all build materials
        delete "${project.parent.buildDir}/resources/main/public_html/apps/${project.name}"
    }

    //copy styleguide or normal app
    if (project.name == 'styleguide') {
        task buildStyleguidist(type: YarnTask, dependsOn: parent.yarn_install) {
            node {
                version = '14.10.1'
                yarnVersion = '1.22.10'
                npmVersion = "6.14.18"
                npmWorkDir = file("${parent.projectDir}/.gradle/npm")
                yarnWorkDir = file("${parent.projectDir}/.gradle/yarn")
                workDir = file("${parent.projectDir}/.gradle/nodejs")
            }

            inputs.files(fileTree('src'))
            inputs.files(fileTree('public'))
            inputs.file('package.json')
            inputs.file('styleguide.config.js')
            inputs.file('vue.config.js')
            outputs.dir('build')

            // tell gradle to apply the build cache
            outputs.cacheIf { true }

            //first install the workspace
            args = ['run', 'styleguide:build']
        }
        task copyDistFiles(type: Copy, dependsOn: buildStyleguidist) {
            from "build"
            inputs.dir("build")
            into "${project.parent.buildDir}/resources/main/public_html/apps/${project.name}"
            outputs.dir("${project.parent.buildDir}/resources/main/public_html/apps/${project.name}")
            outputs.cacheIf { true }

        }
    } else {
        task copyDistFiles(type: Copy, dependsOn: build) {
            from "dist"
            inputs.dir("dist")
            into "${project.parent.buildDir}/resources/main/public_html/apps/${project.name}"
            outputs.dir("${project.parent.buildDir}/resources/main/public_html/apps/${project.name}")
            outputs.cacheIf { true }
        }
    }

    clean.doLast {
        project.delete(files("dist"))
        project.delete(files("build"))
        project.delete(files("node_modules"))
    }

    // TODO QC and test coverage on javascript parts
//    sonarqube {
//        properties {
//            property "sonar.sources", "src"
//        }
//    }
}

/** skip yarn install unless changes => removed because leads to travis errors*/
//yarn_install {
////    inputs.file('package.json')
////    inputs.file('yarn.lock')
////    outputs.dir('node_modules')
////    subprojects.each {
////        inputs.file('package.json')
////        outputs.dir('node_modules')
////    }
//
//    //outputs.cacheIf { true }
//}

/* convert build files into one apps.jar that we can use as a dependency in the java part */
task createJar(type: Zip, dependsOn: subprojects.copyDistFiles) {
    baseName 'apps'
    extension 'jar'
    destinationDir file("${buildDir}/build/libs")
    from('build/resources/main')
}

configurations {
    appResources
}
configurations.default.extendsFrom(configurations.appResources)

/* expose as artifact that can be used as dependency by other modules*/
artifacts {
    appResources(createJar.getArchiveFile()) {
        builtBy createJar
        type "jar"
    }
}



