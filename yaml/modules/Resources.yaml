---
# emx2 will generate web user interface, CSV, Excel, REST, graphql, rdf and ldp interfaces

# relation types are indicated as follows:
#
# linkTo: other table

# primitive types are indicated as keywords in the 'is: '
#
# string, int, long, date, text, hyperlink
# display
#
# also other basics as set via 'is'
# 'many' indicates that it is multiple
# 'required' means a value must be set
# 'hidden' means it hidden from user interface

---
# settings.yaml
prefixes:
  # prefixes are used for an URI/IRI both in semantics statements as well as for imports
  dcat: http://www.w3.org/ns/dcat#
  dct: http://purl.org/dc/terms/
  skos: http://www.w3.org/2004/02/skos/core#
authors:
- name: K. Joeri van der Velde
  email: k.j.van.der.velde@umcg.nl
  orcid: 0000-0002-0934-8375
- name: Morris A. Swertz
  email: m.a.swertz@umcg.nl
  orcid: 0000-0002-0979-3401
copyright:
  holder: University Medical Center Groningen
  years: 2019-2021
license:
  # when licence in https://spdx.github.io/spdx-spec/v2.3/SPDX-license-list/ we don't need URL
  name: Attribution 4.0 International (CC BY 4.0)
  url: https://creativecommons.org/licenses/by/4.0/
units: ./ontologies/units.yml
---
# file that defines a table (Resources)
# so molgenis.yaml may contain a schema, a table or a section
# imports can be URIs or relative paths. When only name it will look into current directory
# if nothing is indicated content is copied instead of the import
# however, you can optionally use #path.to notation to go into internal hierarchy
# when file is a molgenis schema yaml, #mytable could be used to indicate a table 'mytable'
import: [settings.yaml]
table:
  # major discussion if we want to force 'id' plus 'label' instead of 'name'
  # name will be automatically converted from sentence case to valid id using PascalCase
  name: Resources
  # can override the label
  label: Resources table
  version: 21
  # each element can have a status: experimental, stable, deprecated
  status: stable
  # in table listing all 'core' tables will be grouped
  category: core
  settings:
    #arbitrary typed settings, following subset of field schema.
    #can limit edit to particular roles
    - name: requestable
      value: true
      is: boolean
      # editable only by users with role data manager (default)
      edit: [data manager]
      # visible to all users
      view: [anonymous]
      status: experimental
  standards:
    # indicate that there is an adapter to project on beacon standard
    # we use jslt for this
    beacon:
      # could also inline the code
      request.jslt: http://some/jslt_beacon_resources_request.json
      response.jslt: http://some/jslt_beacon_resources_response.json
  # variants allow to slice your table in different way then using sections
  # it also allows for APIs to understand different views of the data
  # each variant will always include key1 fields
  # fields without 'variant' condition are considered part of root type
  # one or more variants could be visible for any row in this table
  # alternative names considered: subset, subtype, profile
  variants:
  - name: registry
    visibleIf: type === 'Registry'
  - name: cohort
    visibleIf: type === 'Cohort'
    # all fields from registry are also in cohort
    include: [registry]
    # semantic definitions
    # we consider renaming to 'semantics'
    definition:
      rdf:type: dcat:DatasetSeries
  - name: catalogue
    visibleIf: type === 'Catalogue'
    definition:
      rdf:type: dcat:DatasetSeries
  sections:
  - name: overview
    fields:
    - name: id
      description: identifier
      # is needs to conform to molgenis core definition, but can be extended
      # currently it should include emx2 types plus 'key1..10' and 'required'
      # key1 is automatically required
      # discussion: we can instead have modeled this using key:1,hidden:true,required:true
      is: key1 required hidden
      # semantic definition of the field, in turtle snippets
      definition:
        # keys can be full IRI or CURIE
        skos:exactMatch: http://purl.obolibrary.org/obo/OMIABIS_0000006
        skos:broader: http://semanticscience.org/resource/SIO_000729, http://purl.obolibrary.org/obo/IAO_0000577
      # rdf definitions for each row (subject) - predicate - value (object)
      predicate: [dct:identifier]
    - name: name
      is: key2
    - name: type
      is: ontology_array required
      ontology: ../ontologies/Resource types.yaml
    - name: catalogue type
      is: ontology
      #inline ontology values instead of using the file
      #can we use same name?
      ontology:
      - value: thematic
        description: Thematic catalogue
        iri: http://some/purl
      - value: project
        description: Project catalogue
      variant: [catalogue]
    - name: website
      # recommended is a soft required which will not stop save but will show warning
      is: hyperlink recommended
    - name: keywords
      is: string_array
    - name: internal  identifiers
      # nested table, can also be modeled as 'refback' in case used in multiple tables
      # will be importable as global table
      table:
        name: Internal identifiers
        fields:
        - name: resource
          is: key1
          # one parent link is required and should be part of key
          select: Resources
        - name:  identifier
          is: key1
        - name: identifier type
          # we also support csv files for ontologies, usually nicer
          ontology: ../ontologies/Identifier types.csv
        - name: identifier type other
  - name: design and structure
    fields:
    - name: design
      ontology: ../ontologies/Cohort designsV1.yaml
      variant: [cohort]
    - name: Subpopulations
      table:
        name: Subpopulations
        fields:
        - name: resource
          select: Resources
          is: key1
        - name: name
          is: key1
        - name: description
          is: text
    - name: collection events
      variant: [cohort]
      table:
        name: Collection events
        description: nested table for defining collection events on this resource
        fields:
        -  name: resource
           select: Resources
           is: key1
        - name: name
          is: key1 text
          # some migrations might need to happen on level of table or even schema
          # see https://databaserefactoring.com/
          versions:
            # original name was identifier
            1:
              name: identifier
              is: text
            20:
              name: identifier
              is: string
              # some javascript (or shall we use SQL?) expression to adapt the value to a new type
              migration: truncate(10)
        - name: my old field
          # we dropped this column in version 20
          dropped: 20
        - name: subpopulations
          checkbox: Subpopulations
        - name: start date
          is: date
          default: today()
        - name: end date
          is: date
          validIf: endDate - startDate > 0
        - name: duration
          visibleIf: startDate && endDate
          # javascript expression on the autogenerated identifiers
          computed: endDate - startDate
          # since version
          version: 20
          # deprecated again
          deprecated: 21

---
# file that defines a specific catalogue schema reusing the definitions
schema:
  name: Catalogue
  version: 1
  tables:
  # import the resources table
  - import: this.Resources
    # override label
    label: Cohorts
    # filter elements to be included/omitted
    # system first includes, them omits
    # e.g. if you can include a section, but omit one its fields
    include:
      variants: [cohort]
      sections: []
      fields: []
    omit:
      variants: []
      sections: []
      fields: [design and structure]
  - name: my table
    fields:
    #no sections in this one
    - name: my custom field
    - name: my other field


---
# reuse a complete schema except my table
schema:
  # id is optional. If not provided automatic PascalCase will be generated from sentence case
  id: mycat
  name: My reduced catalogue
  import: this.Catalogue
  omit:
    tables: [my table]
  tables:
  # want I want to have my table filtered
  - import: this.Catalogue.my table
    omit: [my other field]

---
# composition is also possible on element level
schema:
  name: My catalogue
  tables:
  - name: Collections
    sections:
    - name: overview
      fields:
      # import a field definition, override its label
      - import: this.Resources.id
        label: Identifier
      # note, field names are unique within resources. Can contain spaces. Can't contain '.'
      - import: http://some/molgenis.yaml#schema.a table.a field
    # import a whole section, this file only contains sections
    - import: http://some/molgenis.yaml#somesection

---
# http://some/molgenis.yaml#somesection
section:
  name: somesection
  fields:
  - name: email
    # for documentation purposes
    example: foo@home.nl
    # internationalization of labels possible
    # also possible in ontologies
    comment: should review this example
    status: experimental
    labels:
      nl: electronische post
  - name: weight
    unit: kg




