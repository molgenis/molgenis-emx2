version: 2.1
orbs:
  slack: circleci/slack@4.4.4

definitions:
  build_config: &build_config
    docker:
    - image: molgenis/ci-build:latest
    working_directory: ~/repo
    resource_class: large
    environment:
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      TERM: dumb
  test_config: &test_config
    docker:
    - image: molgenis/ci-build:latest
    - image: postgres:15-alpine
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: postgres
    working_directory: ~/repo
    resource_class: large
    environment:
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      TERM: dumb


commands:
  pre_steps:
    steps:
    - checkout
    - run: git fetch --all --tags
    - run: export COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
    - run:
        name: Setup git, todo, move to molgenisci user
        command: |
          git config --global --add safe.directory '*'
          git config user.email "m.a.swertz@rug.nl"
          git config user.name "mswertz"
          git config url.https://.insteadOf git://
    - run:
          name: Concatenate Build Files as key for cache
          command: |
              find . -name 'build.gradle' -type f -exec cat {} \; > concatenated-build-gradle
          no_output_timeout: 5m
    - restore_cache:
        keys:
          - gradle-{{ checksum "concatenated-build-gradle" }}
          - gradle
    - restore_cache:
        keys:
        - gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
    - run:
        name: Download Dependencies
        command: ./gradlew dependencies --no-daemon
    - save_cache:
        paths:
          - ~/.gradle/wrapper
        key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
    - save_cache:
        paths:
          - ~/.gradle/caches
        key: gradle-{{ checksum "concatenated-build-gradle" }}
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Sign in to docker
        command: docker login -u $DOCKER_USER -p $DOCKER_PASS

  post_steps:
    steps:
    - run:
        name: Save test results for stats
        command: |
          mkdir -p ~/test-results/junit/
          find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
        when: always
    - store_test_results:
        path: ~/test-results
    - store_artifacts:
        path: ./build/libs

# jobs for pull request and master
jobs:
  preview:
    <<: *build_config

    steps:
    - run: |
        echo "PR number: ${CIRCLE_PULL_REQUEST##*/}"

    - pre_steps

    - run:
        name: build and push emx2 java docker images and helm for the preview
        command: ./gradlew -s --no-daemon shadowJar dockerPush helmPublishMainChart ci -x test

    - run:
        name: push ssr-catalogue docker images
        command: |
          export $( cat build/ci.properties | xargs )
          docker build apps/nuxt3-ssr/ -t molgenis/ssr-catalogue-snapshot:latest -t molgenis/ssr-catalogue-snapshot:${TAG_NAME}
          docker push molgenis/ssr-catalogue-snapshot --all-tags
    

    #After migrating to azure code below can be removed
    - run:
        name: deploy preview to rug
        command: |
          export $( cat build/ci.properties | xargs )
          bash ci/set_kubectl_config.sh ${KUBE_CLUSTER} ${KUBE_TOKEN}
          bash ci/create_or_update_k8s.sh "preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}" ${TAG_NAME} DELETE

    - run:
        name: deploy preview to azure
        command: |
          export $( cat build/ci.properties | xargs )
          bash ci/set_kubectl_config-azure.sh
          bash ci/create_or_update_k8s-azure.sh "preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}" ${TAG_NAME} DELETE

    - run:
        name: message slack about preview
        command: |
          export $( cat build/ci.properties | xargs )
          curl -d "token=${SLACK_TOKEN}" \
          -d "text=*<${CIRCLE_PULL_REQUEST}|Circle-CI » Molgenis » Molgenis-emx2 » PR-${CIRCLE_PULL_REQUEST##*/} #${CIRCLE_BUILD_NUM}>*
          PR Preview available on https://preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}.dev.molgenis.org" \
          -d "channel=C02AZDG6QQ7" \
          -X POST https://slack.com/api/chat.postMessage

    - post_steps

  test:
    <<: *test_config

    steps:
    - pre_steps

    - run:
        name: prepare sql test database
        command: |
          apt-get update && apt-get install postgresql-client -y
          psql -h 127.0.0.1 -p 5432 -U postgres < .docker/initdb.sql

    - run:
        name: run tests and push to sonar
        command: |
          ./gradlew test jacocoMergedReport sonar --no-daemon \
          -Dorg.ajoberstar.grgit.auth.username=${GITHUB_TOKEN} -Dorg.ajoberstar.grgit.auth.password \
          -Dsonar.login=${SONAR_TOKEN} -Dsonar.organization=molgenis -Dsonar.host.url=https://sonarcloud.io -Dsonar.verbose=true \
          -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH}

    - post_steps

  release:
    <<: *test_config

    steps:
    - pre_steps
    
    - run:
        name: prepare sql test database
        command: |
          apt-get update && apt-get install postgresql-client -y
          psql -h 127.0.0.1 -p 5432 -U postgres < .docker/initdb.sql

    # we might be optimistic and skip tests here
    - run:
        name: Run tests, merge test results using jacoco and push test results to sonar for the branch (or fail)
        command: |
          ./gradlew shadowJar test jacocoMergedReport sonar ci --no-daemon \
          -Dorg.ajoberstar.grgit.auth.username=${GITHUB_TOKEN} -Dorg.ajoberstar.grgit.auth.password \
          -Dsonar.login=${SONAR_TOKEN} -Dsonar.organization=molgenis -Dsonar.host.url=https://sonarcloud.io -Dsonar.verbose=true \

    - run:
        name: either release or push only snapshots to docker
        command: |
          export $( cat build/ci.properties | xargs )
          if [[ "$TAG_NAME" == *"SNAPSHOT"* ]]; then
            ./gradlew -s --no-daemon dockerPush helmPublishMainChart
            docker build apps/nuxt3-ssr/ -t molgenis/ssr-catalogue-snapshot:latest -t molgenis/ssr-catalogue-snapshot:${TAG_NAME}
            docker push molgenis/ssr-catalogue-snapshot --all-tags
          else
            ./gradlew -s --no-daemon dockerPush helmPublishMainChart release
            docker build apps/nuxt3-ssr/ -t molgenis/ssr-catalogue:latest -t molgenis/ssr-catalogue:${TAG_NAME}
            docker push molgenis/ssr-catalogue --all-tags
          fi

    - run:
        name: update rug demo server
        command: |
          export $( cat build/ci.properties | xargs )
          bash ci/set_kubectl_config.sh ${KUBE_CLUSTER} ${KUBE_TOKEN}
          bash ci/create_or_update_k8s.sh "emx2" ${TAG_NAME}

    - run:
        name: update azure demo server
        command: |
          export $( cat build/ci.properties | xargs )
          bash ci/set_kubectl_config-azure.sh
          bash ci/create_or_update_k8s-azure.sh "emx2" ${TAG_NAME}

    - run:
        name: message slack about release and updated demo server
        command: |
          export $( cat build/ci.properties | xargs )
          curl -d "token=${SLACK_TOKEN}" \
          -d "text=EMX2 version: ${TAG_NAME} is released. Check it out: https://emx2.dev.molgenis.net" \
          -d "channel=C02AZDG6QQ7" \
          -X POST https://slack.com/api/chat.postMessage  

    - post_steps

workflows:
  version: 2
  build_and_test_and_preview_or_release:
    jobs:
    - preview:
        filters:
          branches:
            ignore: master
    - test:
        filters:
          branches:
            ignore: master
    - release:
        filters:
          branches:
            only: master
