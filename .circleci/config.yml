# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
    # specify the version you desire here
    - image: gradle:jdk17-jammy
    - image: postgres:14-alpine
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: postgres
    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4
    working_directory: ~/repo
    
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      TERM: dumb

    steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "build.gradle" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: ./gradlew dependencies

    - save_cache:
        paths:
        - ~/.gradle
        key: v1-dependencies-{{ checksum "build.gradle" }}

    # Initialize the database
    - run: apt-get update && apt-get install postgresql-client -y
    - run: psql -h 127.0.0.1 -p 5432 -U postgres < .docker/initdb.sql

    # install additional software
    - run:
        name: install docker kubectl and helm
        command: sh ci/install_docker_helm_kubectl.sh

    - setup_remote_docker:
        version: 19.03.13
        docker_layer_caching: true

    - run:
        name: Sign in to docker
        command: docker login -u $DOCKER_USER -p $DOCKER_PASS

    - run:
        name: Setup git, todo, move to molgenisci user
        command: |
          git config --global --add safe.directory '*'
          git config user.email "m.a.swertz@rug.nl"
          git config user.name "mswertz"
          git config url.https://.insteadOf git://

    # to switch to release add following
    # ./gradlew release jib -Dorg.ajoberstar.grgit.auth.username=${GITHUB_TOKEN} --stacktrace
    #    ./gradlew checkFormat spotlessCheck test jacocoMergedReport sonarqube ci \
    #    -Dsonar.login=${SONAR_TOKEN} -Dsonar.organization=molgenis -Dsonar.host.url=https://sonarcloud.io \
    #    -Dorg.ajoberstar.grgit.auth.username=${GITHUB_TOKEN} -Dorg.ajoberstar.grgit.auth.password
    - run:
        name: build, test, release, push docker
        command: |
          ./gradlew -x test --no-daemon shadowJar jib release helmPublishMainChart ci \
          -Dsonar.login=${SONAR_TOKEN} -Dsonar.organization=molgenis -Dsonar.host.url=https://sonarcloud.io \
          -Dorg.ajoberstar.grgit.auth.username=${GITHUB_TOKEN} -Dorg.ajoberstar.grgit.auth.password
        environment:
          MOLGENIS_POSTGRES_USER: molgenis
          MOLGENIS_POSTGRES_PASS: molgenis
          MOLGENIS_POSTGRES_URI: jdbc:postgresql://localhost/molgenis


    # block below only in case of PR
    - run:
        name: deploy preview or update dev
        command: |
          export $( cat build/ci.properties | xargs )
          sh ci/create_or_update_preview.sh "preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}" ${TAG_NAME} ${KUBE_CLUSTER} ${KUBE_TOKEN}

      #      # push ssr-catalogue to repo (enable if Jenkinsfile offline)
      #      - run: |
    #          ./gradlew dockerPush

    - run:
        name: message slack
        command: |
          curl -d "token=${SLACK_TOKEN}" -d "channel=C02AZDG6QQ7" -d "text=**[Circle-CI » Molgenis » Molgenis-emx2 » PR-${CIRCLE_PULL_REQUEST##*/} #${CIRCLE_BUILD_NUM}](${CIRCLE_PULL_REQUEST})**<br/>PR Preview available on [${CIRCLE_PULL_REQUEST}](${CIRCLE_PULL_REQUEST})" -X POST https://slack.com/api/chat.postMessage


#          -X POST -H "Authorization: Bearer ${SLACK_TOKEN}" \
#          -H :Content-type: application/json" \
#          --data '{"channel":"","text":"<a href="Circle-CI » Molgenis » Molgenis-emx2 »
#          PR-${CIRCLE_PULL_REQUEST##*/} #${CIRCLE_BUILD_NUM}"></a> available with preview at <a href="https://preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}.dev.molgenis.org">https://preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}.dev.molgenis.org</a>}' \
#          https://slack.com/api/chat.postMessage