version: 2.1

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

orbs:
  slack: circleci/slack@4.4.4

definitions:
  build_config: &build_config
    docker:
    - image: molgenis/ci-build:1.2.3
    working_directory: ~/repo
    resource_class: large
    environment:
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      TERM: dumb
  test_config: &test_config
    docker:
    - image: molgenis/ci-build:1.2.3
    - image: postgres:15-alpine
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: postgres
    working_directory: ~/repo
    resource_class: large
    environment:
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      TERM: dumb
  release_config: &release_config
    docker:
      - image: molgenis/ci-build:1.2.3
      - image: postgres:15-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
    working_directory: ~/repo
    resource_class: large
    environment:
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.caching=false"
      TERM: dumb


commands:
  pre_steps:
    steps:
    - checkout
    - run: git fetch --all --tags
    - run:
        name: Setup git, todo, move to molgenisci user
        command: |
          git config --global --add safe.directory '*'
          git config user.email "m.a.swertz@rug.nl"
          git config user.name "mswertz"
          git config url.https://.insteadOf git://
    - run:
          name: Concatenate Build Files as key for cache
          command: |
              find . -name 'build.gradle' -type f -exec cat {} \; > concatenated-build-gradle
          no_output_timeout: 5m
    - restore_cache:
        keys:
          - gradle-{{ checksum "concatenated-build-gradle" }}
          - gradle
    - restore_cache:
        keys:
        - gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
    - run:
        name: Download Dependencies
        command: ./gradlew dependencies --no-daemon
    - save_cache:
        paths:
          - ~/.gradle/wrapper
        key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
    - save_cache:
        paths:
          - ~/.gradle/caches
        key: gradle-{{ checksum "concatenated-build-gradle" }}
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Sign in to docker
        command: docker login -u $DOCKER_USER -p $DOCKER_PASS

  post_steps:
    steps:
    - run:
        name: Save test results for stats
        command: |
          mkdir -p ~/test-results/junit/
          find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
        when: always
    - store_test_results:
        path: ~/test-results
#    - store_artifacts:
#        path: ./build/libs

# jobs for pull request and master
jobs:
  preview:
    <<: *build_config

    steps:
    - run: |
        echo "PR number: ${CIRCLE_PULL_REQUEST##*/}"

    - pre_steps

    - run:
        name: build and push emx2 java docker images for the preview
        command: ./gradlew -s --no-daemon shadowJar dockerPush ci -x test

    - run:
        name: push ssr-catalogue docker images
        command: |
          export $( cat build/ci.properties | xargs )
          docker build apps/nuxt3-ssr/ -t molgenis/ssr-catalogue-snapshot:latest -t molgenis/ssr-catalogue-snapshot:${TAG_NAME}
          docker push molgenis/ssr-catalogue-snapshot --all-tags
    
    - run:
        name: deploy preview to azure
        command: |
          export $( cat build/ci.properties | xargs )
          bash ci/set_kubectl_config-azure.sh
          bash ci/create_or_update_k8s-azure.sh "preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}" ${TAG_NAME} DELETE

    - run:
        name: Wait for preview to be up, poll every 10 seconds
        command: |
          GETURL="https://preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}.dev.molgenis.org/catalogue-demo/ssr-catalogue/testNetwork1"
          while true; 
              do 
                  STATUS=$(curl --silent --head $GETURL | awk '/^HTTP/{print $2}')
                  echo ${STATUS}
                  if [[ "$STATUS" == "200" ]]; then 
                      echo "preview is up";
                      break; 
                  else 
                      echo "preview is not ready yet, waiting 10 seconds...";
                  fi; 
                  sleep 10; 
              done

    - run:
        name: message slack about preview
        command: |
          export $( cat build/ci.properties | xargs )
          curl -d "token=${SLACK_TOKEN}" \
          -d "text=*<${CIRCLE_PULL_REQUEST}|Circle-CI » Molgenis » Molgenis-emx2 » PR-${CIRCLE_PULL_REQUEST##*/} #${CIRCLE_BUILD_NUM}>*
          PR Preview available on https://preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}.dev.molgenis.org" \
          -d "channel=C02AZDG6QQ7" \
          -X POST https://slack.com/api/chat.postMessage

    - post_steps

  test:
    <<: *test_config

    steps:
    - pre_steps

    - run:
        name: prepare sql test database
        command: psql -h 127.0.0.1 -p 5432 -U postgres < .docker/initdb.sql

    - run:
        name: run tests and push to sonar
        command: |
          ./gradlew test jacocoMergedReport sonar --no-daemon \
          -Dorg.ajoberstar.grgit.auth.username=${GITHUB_TOKEN} -Dorg.ajoberstar.grgit.auth.password \
          -Dsonar.login=${SONAR_TOKEN} -Dsonar.organization=molgenis -Dsonar.host.url=https://sonarcloud.io -Dsonar.verbose=true \
          -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH}

    - post_steps

  release:
    <<: *release_config

    steps:
    - pre_steps
    
    - run:
        name: prepare sql test database
        command: psql -h 127.0.0.1 -p 5432 -U postgres < .docker/initdb.sql

    # we might be optimistic and skip tests here
    - run:
        name: Run tests, merge test results using jacoco and push test results to sonar for the branch (or fail)
        command: |
          ./gradlew shadowJar test jacocoMergedReport sonar ci --no-daemon \
          -Dorg.ajoberstar.grgit.auth.username=${GITHUB_TOKEN} -Dorg.ajoberstar.grgit.auth.password \
          -Dsonar.login=${SONAR_TOKEN} -Dsonar.organization=molgenis -Dsonar.host.url=https://sonarcloud.io -Dsonar.verbose=true \

    - run:
        name: either release or push only snapshots to docker
        command: |
          export $( cat build/ci.properties | xargs )
          if [[ "$TAG_NAME" == *"SNAPSHOT"* ]]; then
            ./gradlew -s --no-daemon dockerPush
            docker build apps/nuxt3-ssr/ -t molgenis/ssr-catalogue-snapshot:latest -t molgenis/ssr-catalogue-snapshot:${TAG_NAME}
            docker push molgenis/ssr-catalogue-snapshot --all-tags
          else
            ./gradlew -s --no-daemon dockerPush release
            docker build apps/nuxt3-ssr/ -t molgenis/ssr-catalogue:latest -t molgenis/ssr-catalogue:${TAG_NAME}
            docker push molgenis/ssr-catalogue --all-tags
          fi

    - run:
        name: update azure demo server
        command: |
          export $( cat build/ci.properties | xargs )
          bash ci/set_kubectl_config-azure.sh
          bash ci/create_or_update_k8s-azure.sh "emx2" ${TAG_NAME}

    - run:
        name: message slack about release and updated demo server
        command: |
          export $( cat build/ci.properties | xargs )
          curl -d "token=${SLACK_TOKEN}" \
          -d "text=EMX2 version: ${TAG_NAME} is released. Check it out: https://emx2.dev.molgenis.net" \
          -d "channel=C02AZDG6QQ7" \
          -X POST https://slack.com/api/chat.postMessage  

    - post_steps
  e2e-test:
    docker:
      - image: mcr.microsoft.com/playwright:v1.44.0-jammy
    steps:
      - checkout
      - run: npm i -D @playwright/test
      - run: npx playwright install chrome
      - run:
          name: Wait for e2e test data to be loaded, poll every 10 seconds
          command: |
            GETURL="https://preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}.dev.molgenis.org/catalogue-demo/ssr-catalogue/testNetwork1"           
            while true; 
                do 
                    STATUS=$(curl --silent --head $GETURL | awk '/^HTTP/{print $2}')
                    echo ${STATUS} ${GETURL}
                    if [[ "$STATUS" == "200" ]]; then 
                        echo "test data is loaded";
                        break; 
                    else 
                        echo "test data is not ready yet, waiting 10 seconds...";
                    fi; 
                    sleep 10; 
                done
      - run:
          command: | 
            echo "PR number: ${CIRCLE_PULL_REQUEST##*/}"
            export E2E_BASE_URL=https://preview-emx2-pr-${CIRCLE_PULL_REQUEST##*/}.dev.molgenis.org/
            echo $E2E_BASE_URL
            npx playwright test --config e2e e2e/tests
      - store_test_results:
         path: /root/project/e2e
      - store_artifacts:
          path: /root/project/e2e/test-results

  emx2-pyclient:
    <<: *build_config

    steps:
      - pre_steps
      - run:
          name: Reset TWINE_PASSWORD in case of release to PyPI (default is testPyPI token)
          command: |
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
               echo "Reset testPyPI token to PyPI token"
               echo "export TWINE_PASSWORD=$PYPI_PASSWORD" >> "$BASH_ENV"
            fi
      - run:
          name: Release to (test)PyPI based on commit message
          command: |
            export REGEX="^.*(emx2-pyclient).*$"
            if [[ $(git log -1 --pretty=format:%s) =~ $REGEX ]]; then
              export $( cat build/ci.properties | xargs )
              ./gradlew -s --no-daemon publishPython > pypi_output
              curl -d "token=${SLACK_TOKEN}" \
              -d "text=*<${CIRCLE_PULL_REQUEST}|Circle-CI » Molgenis » Molgenis-emx2 » PR-${CIRCLE_PULL_REQUEST##*/} #${CIRCLE_BUILD_NUM}>*
              A new molgenis-emx2-pyclient version is released: $( grep 'View at:' pypi_output -A 1 | grep -v 'View at:' )" \
              -d "channel=C02AZDG6QQ7" \
              -X POST https://slack.com/api/chat.postMessage
            else
              echo "No release to (test)PyPI needed"
            fi
      - run:
          name: Message slack about a new molgenis-emx2-pyclient version
          command: |
            export REGEX="^.*(emx2-pyclient).*$"
            if [[ $(git log -1 --pretty=format:%s) =~ $REGEX ]]; then
              curl -d "token=${SLACK_TOKEN}" \
              -d "text=*<${CIRCLE_PULL_REQUEST}|Circle-CI » Molgenis » Molgenis-emx2 » PR-${CIRCLE_PULL_REQUEST##*/} #${CIRCLE_BUILD_NUM}>*
              A new molgenis-emx2-pyclient version is released: $( grep 'View at:' pypi_output -A 1 | grep -v 'View at:' )" \
              -d "channel=C02AZDG6QQ7" \
              -X POST https://slack.com/api/chat.postMessage
            fi           

  delete-helm-preview:
    <<: *build_config

    environment:
      GHA_PREVIEW_NR: << pipeline.parameters.GHA_Meta >>
    
    steps:
    - pre_steps
    
    - run:
        name: delete preview on azure
        command: |
          export $( cat build/ci.properties | xargs )
          bash ci/set_kubectl_config-azure.sh
          kubectl delete namespace preview-emx2-pr-${GHA_PREVIEW_NR} || true

workflows:
  version: 2
  build_and_test_and_preview_or_release:
    unless:
      equal: [ "delete-pr-preview", << pipeline.parameters.GHA_Action >> ]
    jobs:
    - preview:
        filters:
          branches:
            ignore: master
    - e2e-test:
        requires:
          - preview
        filters:
            branches:
              ignore: master
    - test:
       filters:
         branches:
           ignore: master
    - emx2-pyclient:
        name: testPyPI release
        filters:
          branches:
            ignore: master
    - release:
       filters:
         branches:
           only: master
    - emx2-pyclient:
        name: PyPI release
        requires:
          - release
        filters:
          branches:
            only: master

  delete_preview:
    when:
      equal: [ "delete-pr-preview", << pipeline.parameters.GHA_Action >> ]
    jobs:
    - delete-helm-preview
